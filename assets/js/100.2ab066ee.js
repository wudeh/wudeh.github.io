(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{546:function(s,n,a){"use strict";a.r(n);var e=a(3),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"a-1-a-2-a-3-有可能是-true-吗"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-1-a-2-a-3-有可能是-true-吗"}},[s._v("#")]),s._v(" (a == 1 && a == 2 && a == 3) 有可能是 true 吗？")]),s._v(" "),n("h3",{attrs:{id:"defineproperty"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defineproperty"}},[s._v("#")]),s._v(" defineProperty")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var val = 0;\n Object.defineProperty(window, 'a', { // 这里要window，这样的话下面才能直接使用a变量去 ==\n     get: function () {\n         return ++val;\n     }\n });\n console.log(a == 1 && a == 2 && a == 3) // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"对象类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象类型转换"}},[s._v("#")]),s._v(" 对象类型转换")]),s._v(" "),n("p",[s._v("当两个类型不同时进行==比较时，会将一个类型转为另一个类型，然后再进行比较。 比如Object类型与Number类型进行比较时，Object类型会转换为Number类型。 Object转换为Number时，会尝试调用Object.valueOf()和Object.toString()来获取对应的数字基本类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a = {\n  i: 1,\n  toString: function () {\n      return a.i++;\n  }\n}\nconsole.log(a == 1 && a == 2 && a == 3) // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"数组类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组类型转换"}},[s._v("#")]),s._v(" 数组类型转换")]),s._v(" "),n("p",[s._v("与上面这个类型转换一样，数组调用toString()会隐含调用Array.join()方法 而数组shift方法的用法：shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。请注意，该方法不创建新数组，而是直接修改原有的 数组。 所以我们可以看到 a == 1时会调用toString(),toString()调用join()，join()等于shift，则转换为Number类型后为1.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a = [1, 2, 3];\na.join = a.shift;\nconsole.log(a == 1 && a == 2 && a == 3); // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"原型链的题目-getname"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型链的题目-getname"}},[s._v("#")]),s._v(" 原型链的题目(getName)")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Foo() {\n    getName = function () { alert (1); };\n    return this;\n}\nFoo.getName = function () { alert (2);};\nFoo.prototype.getName = function () { alert (3);};\nvar getName = function () { alert (4);};\nfunction getName() { alert (5);}\n\n//请写出以下输出结果：\nFoo.getName();\ngetName();\nFoo().getName();\ngetName();\nnew Foo.getName();\nnew Foo().getName();\nnew new Foo().getName();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h2",{attrs:{id:"非匿名自执行函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非匿名自执行函数"}},[s._v("#")]),s._v(" 非匿名自执行函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var b = 10;\n(function b(){\n    b = 20;\n    console.log(b); \n})();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("打印结果")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ƒ b() {\nb = 20;\nconsole.log(b)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("特性：")]),s._v(" "),n("ul",[n("li",[s._v("声明提前：一个声明在函数体内都是可见的，函数声明优先于变量声明；")]),s._v(" "),n("li",[s._v("在非匿名自执行函数中，函数变量为只读状态无法修改；")])]),s._v(" "),n("h2",{attrs:{id:"函数声明提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数声明提升"}},[s._v("#")]),s._v(" 函数声明提升")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function fn(a) { //二、形参是a，值为undefined\n      console.log(a); // function() {}\n      var a = 123; //二、a变量声明，AO里已经有了，覆盖后还是一样的\n      console.log(a); // 123\n      function a() {}// 四、a 申明为一个函数\n      console.log(a); // 123\n      var b = function() {} //二、变量b声明，值为undefined\n      console.log(b); // function() {}\n      function d() {} // 四、d声明为一个函数\n      var d = a //二、变量d声明，值为undefined\n      console.log(d); // 123\n    }\nfn(1)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"匿名自执行函数中的-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匿名自执行函数中的-this"}},[s._v("#")]),s._v(" 匿名自执行函数中的 this")]),s._v(" "),n("ul",[n("li",[s._v("函数表达式,等同于普通函数或者事件绑定等机制")]),s._v(" "),n("li",[s._v("自执行函数:一般是windows/undefined")]),s._v(" "),n("li",[s._v("回调函数:一般是window/undefined,但是如果另外函数执行中，堆回调函数做了特殊处理，以自己处理的为主")]),s._v(" "),n("li",[s._v('括号表达式:小括号中包含"多项"，这样也只取最后一项，但是this受到影响(一般是window/undefined)')])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var x = 3,\n    obj = {x: 5};\nobj.fn = (function () {\n    this.x *= ++x;\n    return function (y) {\n        this.x *= (++x)+y;\n        console.log(x);\n    }\n})();\nvar fn = obj.fn;\nobj.fn(6); // x->13\nfn(4); // x->234\nconsole.log(obj.x, x); // obj.x=95 x=234\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h2",{attrs:{id:"如何找到是谁阻止了冒泡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何找到是谁阻止了冒泡"}},[s._v("#")]),s._v(" 如何找到是谁阻止了冒泡")]),s._v(" "),n("p",[s._v("经常用于寻找我绑定的事件为什么没有被触发，主要是利用了 "),n("code",[s._v("console.trace()")]),s._v(" 来显示当前执行的代码在堆栈中的调用路径。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var tmpStopPropagation = MouseEvent.prototype.stopPropagation;\n\nMouseEvent.prototype.stopPropagation = function(...args) {\n  console.trace('stopPropagation');\n  tmpStopPropagation.call(this, ...args);\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);