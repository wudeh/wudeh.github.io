(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{508:function(v,_,t){"use strict";t.r(_);var a=t(3),r=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"垃圾回收策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收策略"}},[v._v("#")]),v._v(" 垃圾回收策略")]),v._v(" "),_("h3",{attrs:{id:"引用计数算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法"}},[v._v("#")]),v._v(" 引用计数算法")]),v._v(" "),_("p",[v._v("引用计数（Reference Counting），这其实是早先的一种垃圾回收算法，它把 对象是否不再需要 简化定义为 对象有没有其他对象引用到它，如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。")]),v._v(" "),_("ul",[_("li",[v._v("它的策略是跟踪记录每个变量值被使用的次数：")]),v._v(" "),_("li",[v._v("当声明了一个变量并且将一个引用类型赋值给该变量的时候这个值的引用次数就为 1")]),v._v(" "),_("li",[v._v("如果同一个值又被赋给另一个变量，那么引用数加 1")]),v._v(" "),_("li",[v._v("如果该变量的值被其他的值覆盖了，则引用次数减 1")]),v._v(" "),_("li",[v._v("当这个值的引用次数变为 0 的时候，说明没有变量在使用，这个值没法被访问了，回收空间，垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的内存")])]),v._v(" "),_("p",[v._v("优点：首先引用计数在引用值为 0 时，也就是在变成垃圾的那一刻就会被回收，所以它可以立即回收垃圾\n而标记清除算法需要每隔一段时间进行一次，那在应用程序（JS脚本）运行过程中线程就必须要暂停去执行一段时间的 GC，另外，标记清除算法需要遍历堆里的活动以及非活动对象来清除，而引用计数则只需要在引用时计数就可以了")]),v._v(" "),_("p",[v._v("缺点：首先它需要一个计数器，而此计数器需要占很大的位置，因为我们也不知道被引用数量的上限，还有就是无法解决循环引用无法回收的问题，这也是最严重的")]),v._v(" "),_("h3",{attrs:{id:"标记清除算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记清除算法"}},[v._v("#")]),v._v(" 标记清除算法")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("目前为止的大多数浏览器的 JavaScript引擎 都在采用标记清除算法，此算法分为 标记 和 清除 两个阶段，标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁。")])]),v._v(" "),_("li",[_("p",[v._v("引擎在执行 GC（使用标记清除算法）时，需要从出发点去遍历内存中所有的对象去打标记，而这个出发点有很多，我们称之为一组 根 对象，而所谓的根对象，其实在浏览器环境中包括又不止于 全局Window对象、文档DOM树 等")])]),v._v(" "),_("li",[_("p",[v._v("整个标记清除算法大致过程就像下面这样：")])]),v._v(" "),_("li",[_("p",[v._v("垃圾收集器在运行时会给内存中的所有变量都加上一个标记，假设内存中所有对象都是垃圾，全标记为0")])]),v._v(" "),_("li",[_("p",[v._v("然后从各个根对象开始遍历，把不是垃圾的节点改成1")])]),v._v(" "),_("li",[_("p",[v._v("清理所有标记为0的垃圾，销毁并回收它们所占用的内存空间")])]),v._v(" "),_("li",[_("p",[v._v("最后，把所有内存中对象标记修改为0，等待下一轮垃圾回收")])]),v._v(" "),_("li",[_("p",[v._v("优点：实现比较简单，打标记也无非打与不打两种情况，这使得一位二进制位（0和1）就可以为其标记，非常简单")])]),v._v(" "),_("li",[_("p",[v._v("缺点：")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("内存碎片化")]),v._v("：在清除之后，剩余的对象内存位置是不变的，也会导致空闲内存空间是不连续的，出现了 "),_("code",[v._v("内存碎片")]),v._v("，空闲内存块是不连续的，容易出现很多空闲内存块，还可能会出现分配所需内存过大的对象时找不到合适的块")])])]),v._v(" "),_("blockquote",[_("p",[v._v("假设我们新建对象分配内存时需要大小为 size，由于空闲内存是间断的、不连续的，则需要对空闲内存列表进行一次单向遍历找出大于等于 size 的块才能为其分配")])]),v._v(" "),_("ul",[_("li",[v._v("如何找到合适的块呢？可以采取下面三种分配策略：")])]),v._v(" "),_("p",[v._v("First-fit，找到大于等于 size 的块立即返回")]),v._v(" "),_("p",[v._v("Best-fit，遍历整个空闲列表，返回大于等于 size 的最小分块")]),v._v(" "),_("p",[v._v("Worst-fit，遍历整个空闲列表，找到最大的分块，然后切成两部分，一部分 size 大小，并将该部分返回")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("分配速度慢")]),v._v("，因为即便是使用 First-fit 策略，其操作仍是一个 O(n) 的操作，最坏情况是每次都要遍历到最后，同时因为碎片化，大对象的分配效率会更慢")])]),v._v(" "),_("h3",{attrs:{id:"标记整理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记整理"}},[v._v("#")]),v._v(" 标记整理")]),v._v(" "),_("p",[v._v("归根结底，标记清除算法的缺点在于清除之后剩余的对象位置不变而导致的空闲内存不连续，所以只要解决这一点，两个缺点都可以完美解决了\n而 标记整理（Mark-Compact）算法 就可以有效地解决，它的标记阶段和标记清除算法没有什么不同，只是标记结束后，标记整理算法会将活着的对象（即不需要清理的对象）向内存的一端移动，最后清理掉边界的内存")]),v._v(" "),_("h2",{attrs:{id:"v8对gc的优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#v8对gc的优化"}},[v._v("#")]),v._v(" V8对GC的优化")]),v._v(" "),_("h3",{attrs:{id:"新老生代"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新老生代"}},[v._v("#")]),v._v(" 新老生代")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("V8 的垃圾回收策略主要基于"),_("code",[v._v("分代式垃圾回收机制")]),v._v("，V8 中将堆内存分为"),_("code",[v._v("新生代")]),v._v("和"),_("code",[v._v("老生代")]),v._v("两区域，采用不同的垃圾回收器也就是不同的策略管理垃圾回收")])]),v._v(" "),_("li",[_("p",[v._v("新生代的对象为存活时间较短的对象，简单来说就是新产生的对象，通常只支持 1～8M 的容量，而老生代的对象为存活事件较长或常驻内存的对象，简单来说就是经历过新生代垃圾回收后还存活下来的对象，容量通常比较大")])]),v._v(" "),_("li",[_("p",[v._v("V8 整个堆内存的大小就等于新生代加上老生代的内存")])]),v._v(" "),_("li",[_("p",[v._v("对于新老两块内存区域的垃圾回收，V8 采用了两个垃圾回收器来管控，我们暂且将管理新生代的垃圾回收器叫做新生代垃圾回收器，同样的，我们称管理老生代的垃圾回收器叫做老生代垃圾回收")])])]),v._v(" "),_("h3",{attrs:{id:"新生代垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#新生代垃圾回收"}},[v._v("#")]),v._v(" 新生代垃圾回收")]),v._v(" "),_("p",[v._v("新生代对象是通过一个名为 "),_("code",[v._v("Scavenge")]),v._v(" 的算法进行垃圾回收，在 "),_("code",[v._v("Scavenge")]),v._v("算法 的具体实现中，主要采用了一种复制式的方法即 "),_("code",[v._v("Cheney")]),v._v("算法")]),v._v(" "),_("ul",[_("li",[v._v("新加入的对象都会存放到使用区，当使用区快被写满时，就需要执行一次垃圾清理操作")]),v._v(" "),_("li",[v._v("当开始进行垃圾回收时，新生代垃圾回收器会对使用区中的活动对象做标记，标记完成之后将使用区的活动对象复制进空闲区并进行排序，随后进入垃圾清理阶段，即将非活动对象占用的空间清理掉。最后进行角色互换，把原来的使用区变成空闲区，把原来的空闲区变成使用区")])]),v._v(" "),_("p",[v._v("新生代变为老生代的情况：")]),v._v(" "),_("ul",[_("li",[v._v("当一个对象经过多次复制后依然存活，它将会被认为是生命周期较长的对象，随后会被移动到老生代中，采用老生代的垃圾回收策略进行管理")]),v._v(" "),_("li",[v._v("如果复制一个对象到空闲区时，空闲区空间占用超过了 25%，那么这个对象会被直接晋升到老生代空间中，设置为 25% 的比例的原因是，当完成 Scavenge 回收后，空闲区将翻转成使用区，继续进行对象内存的分配，若占比过大，将会影响后续内存分配")])]),v._v(" "),_("h3",{attrs:{id:"老生代垃圾回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#老生代垃圾回收"}},[v._v("#")]),v._v(" 老生代垃圾回收")]),v._v(" "),_("p",[v._v("对于大多数占用空间大、存活时间长的对象会被分配到老生代里，因为老生代中的对象通常比较大，如果再如新生代一般分区然后复制来复制去就会非常耗时，从而导致回收执行效率不高，所以老生代垃圾回收器来管理其垃圾回收执行，它的整个流程就采用的就是上文所说的标记清除算法了")]),v._v(" "),_("ul",[_("li",[v._v("首先是标记阶段，从一组根元素开始，递归遍历这组根元素，遍历过程中能到达的元素称为活动对象，没有到达的元素就可以判断为非活动对象")]),v._v(" "),_("li",[v._v("清除阶段老生代垃圾回收器会直接将非活动对象，也就是数据清理掉")]),v._v(" "),_("li",[v._v("前面我们也提过，标记清除算法在清除后会产生大量不连续的内存碎片，过多的碎片会导致大对象无法分配到足够的连续内存，而 V8 中就采用标记整理算法来解决这一问题来优化空间")])]),v._v(" "),_("h3",{attrs:{id:"并行回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并行回收"}},[v._v("#")]),v._v(" 并行回收")]),v._v(" "),_("p",[v._v("在介绍并行之前，我们先要了解一个概念 全停顿（Stop-The-World），我们都知道 JavaScript 是一门单线程的语言，它是运行在主线程上的，那在进行垃圾回收时就会阻塞 JavaScript 脚本的执行，需等待垃圾回收完毕后再恢复脚本执行，我们把这种行为叫做 全停顿")]),v._v(" "),_("p",[v._v("所谓并行，也就是同时的意思，它指的是垃圾回收器在主线程上执行的过程中，开启多个辅助线程，同时执行同样的回收工作")]),v._v(" "),_("p",[v._v("新生代对象空间就采用并行策略，在执行垃圾回收的过程中，会启动了多个线程来负责新生代中的垃圾清理操作，这些线程同时将对象空间中的数据移动到空闲区域，这个过程中由于数据地址会发生改变，所以还需要同步更新引用这些对象的指针，此即并行回收")]),v._v(" "),_("h3",{attrs:{id:"增量标记"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#增量标记"}},[v._v("#")]),v._v(" 增量标记")]),v._v(" "),_("p",[v._v("在2011年，V8从 stop-the-world 标记切换到增量标记。使用增量标记算法，GC 可以将回收任务分解成很多小任务，穿插在JS任务中间执行，这样避免了应用出现卡顿的情况")]),v._v(" "),_("h3",{attrs:{id:"并发回收"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#并发回收"}},[v._v("#")]),v._v(" 并发回收")]),v._v(" "),_("p",[v._v("并行回收依然会阻塞主线程，增量标记同样有增加了总暂停时间、降低应用程序吞吐量两个缺点，那么怎么才能在不阻塞主线程的情况下执行垃圾回收并且与增量相比更高效呢？\n这就要说到并发回收了，它指的是主线程在执行 JavaScript 的过程中，辅助线程能够在后台完成执行垃圾回收的操作，辅助线程在执行垃圾回收的时候，主线程也可以自由执行而不会被挂起")]),v._v(" "),_("p",[v._v("辅助线程在执行垃圾回收的时候，主线程也可以自由执行而不会被挂起，这是并发的优点，但同样也是并发回收实现的难点，因为它需要考虑主线程在执行 JavaScript  时，堆中的对象引用关系随时都有可能发生变化，这时辅助线程之前做的一些标记或者正在进行的标记就会要有所改变，所以它需要额外实现一些读写锁机制来控制这一点，这里不再细说")]),v._v(" "),_("p",[v._v("关于新生代垃圾回收器，使用并行回收可以很好的增加垃圾回收的效率，那老生代垃圾回收器用的哪个策略呢？有并行回收、增量标记与惰性清理、并发回收这几种回收方式来提高效率、优化体验，看着一个比一个好，那老生代垃圾回收器到底用的哪个策略？\n其实，这三种方式各有优缺点，所以在老生代垃圾回收器中这几种策略都是融合使用的\n老生代主要使用并发标记，主线程在开始执行 JavaScript 时，辅助线程也同时执行标记操作（标记操作全都由辅助线程完成）\n标记完成之后，再执行并行清理操作（主线程在执行清理操作时，多个辅助线程也同时执行清理操作）\n同时，清理的任务会采用增量的方式分批在各个 JavaScript 任务之间执行")])])}),[],!1,null,null,null);_.default=r.exports}}]);