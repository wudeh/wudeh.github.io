(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{523:function(n,e,s){"use strict";s.r(e);var t=s(3),a=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"错误监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#错误监控"}},[n._v("#")]),n._v(" 错误监控")]),n._v(" "),e("p",[n._v("前端捕获异常分为全局捕获和单点捕获。")]),n._v(" "),e("ul",[e("li",[n._v("全局捕获代码集中，易于管理；")]),n._v(" "),e("li",[n._v("单点捕获作为补充，对某些特殊情况进行捕获，但分散，不利于管理。")])]),n._v(" "),e("h3",{attrs:{id:"全局捕获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局捕获"}},[n._v("#")]),n._v(" 全局捕获")]),n._v(" "),e("ul",[e("li",[n._v("通过全局的接口，将捕获代码集中写在一个地方，可以利用的接口有：\nwindow.addEventListener(‘error’) / window.addEventListener(“unhandledrejection”) / document.addEventListener(‘click’) 等")])]),n._v(" "),e("p",[n._v("框架级别的全局监听，")]),n._v(" "),e("ul",[e("li",[n._v("例如aixos中使用interceptor进行拦截，\nvue、react都有自己的错误采集接口")]),n._v(" "),e("li",[n._v("通过对全局函数进行封装包裹，实现在在调用该函数时自动捕获异常")]),n._v(" "),e("li",[n._v("对实例方法重写（Patch），在原有功能基础上包裹一层，例如对setTimeout进行重写，在使用方法不变的情况下也可以异常捕获")])]),n._v(" "),e("h3",{attrs:{id:"单点捕获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单点捕获"}},[n._v("#")]),n._v(" 单点捕获")]),n._v(" "),e("p",[n._v("在业务代码中对单个代码块进行包裹，或在逻辑流程中打点，实现有针对性的异常捕获：")]),n._v(" "),e("ul",[e("li",[n._v("try…catch")]),n._v(" "),e("li",[n._v("专门写一个函数来收集异常信息，在异常发生时，调用该函数")]),n._v(" "),e("li",[n._v("专门写一个函数来包裹其他函数，得到一个新函数，该新函数运行结果和原函数一模一样，只是在发生异常时可以捕获异常")])]),n._v(" "),e("h3",{attrs:{id:"window-onerror"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-onerror"}},[n._v("#")]),n._v(" window.onerror")]),n._v(" "),e("p",[n._v("监控JavaScript运行时错误（包括语法错误）和 资源加载错误")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("window.onerror = function(message, source, lineno, colno, error) { ... }\nwindow.addEventListener('error', function(event) { ... }, true)\n// 函数参数：\n    // message：错误信息（字符串）。可用于HTML onerror=\"\"处理程序中的event。\n    // source：发生错误的脚本URL（字符串）\n    // lineno：发生错误的行号（数字）\n    // colno：发生错误的列号（数字）\n    // error：Error对象（对象\n\n可以看到 JS 错误监控里面有个 window.onEerror，\n又用了 window.addEventLisenter（'error'），\n其实两者并不能互相代替。\nwindow.onError 是一个标准的错误捕获接口，它可以拿到对应的这种 JS 错误；\nwindow.addEventLisenter（'error'）也可以捕获到错误，\n但是它拿到的 JS 报错堆栈往往是不完整的。\n同时 window.onError 无法获取到资源加载失败的一个情况，\n必须使用 window.addEventLisenter（'error'）来捕获资源加载失败的情况。\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("h3",{attrs:{id:"unhandledrejection"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unhandledrejection"}},[n._v("#")]),n._v(" unhandledrejection")]),n._v(" "),e("p",[n._v("捕获未被catch的reject状态的promise")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('window.addEventListener("unhandledrejection", event => {\n  console.warn(`UNHANDLED PROMISE REJECTION: ${event.reason}`);\n});\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("h3",{attrs:{id:"settimeout、setinterval、requestanimationframe等"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#settimeout、setinterval、requestanimationframe等"}},[n._v("#")]),n._v(" setTimeout、setInterval、requestAnimationFrame等")]),n._v(" "),e("p",[n._v("通过代理的方式把原来的方法拦截一下在调用真实的方法之前做一些自己的事情")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const prevSetTimeout = window.setTimeout;\n\nwindow.setTimeout = function(callback, timeout) {\n  const self = this;\n  return prevSetTimeout(function() {\n    try {\n      callback.call(this);\n    } catch (e) {\n      // 捕获到详细的错误，在这里处理日志上报等了逻辑\n      // ...\n      throw e;\n    }\n  }, timeout);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br")])]),e("h3",{attrs:{id:"vue的vue-config-errorhandler-react的errorboundary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的vue-config-errorhandler-react的errorboundary"}},[n._v("#")]),n._v(" Vue的Vue.config.errorHandler , React的ErrorBoundary")]),n._v(" "),e("h2",{attrs:{id:"性能监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能监控"}},[n._v("#")]),n._v(" 性能监控")]),n._v(" "),e("p",[n._v("在说明各项指标之前，先说一下， web-vitals 库，这个库可以用来计算各指标")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("npm install web-vitals\n\nimport { getLCP, getFID, getCLS } from 'web-vitals'\ngetCLS((metric) => console.log('cls: ' + metric.value))\ngetFID((metric) => console.log('fid: ' + metric.value))\ngetLCP((metric) => console.log('lcp: ' + metric.value))\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("h2",{attrs:{id:"前端性能监控api-performance"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端性能监控api-performance"}},[n._v("#")]),n._v(" 前端性能监控API——Performance")]),n._v(" "),e("h3",{attrs:{id:"常用属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用属性"}},[n._v("#")]),n._v(" 常用属性")]),n._v(" "),e("ul",[e("li",[n._v("memory：主要是和内存相关，显示此刻的内存占用情况，图中可以发现其有三个属性")])]),n._v(" "),e("p",[n._v("jsHeapSizeLimit：上下文内可用堆的最大体积\ntotalJSHeapSize：当前js堆栈总内存大小\nusedJSHeapSize：当前被使用的内存大小，不能大于totalJSHeapSize，大于就可能有内存泄漏。")]),n._v(" "),e("ul",[e("li",[n._v("navigation：表示出现在当前浏览上下文的 navigation 类型，图中可以发现其有两个属性")])]),n._v(" "),e("p",[n._v("redirectCount：重定向的次数，表示当前页重定向了几次\ntype：表示页面打开类型，可选值有 0、1、2、255")]),n._v(" "),e("p",[n._v("0：通过常规的导航访问页面，例如点击链接\n1：通过刷新（包括用js调用的刷新）访问页面\n2：通过前进或者后退按钮访问页面\n255：除了以上的方式访问页面")]),n._v(" "),e("ul",[e("li",[n._v("timing：统计了从浏览器从网址开始导航到 window.onload事件触发的一系列关键的时间点")]),n._v(" "),e("li",[n._v("navigationStart：表示在同一浏览上下文中上一个文档终止时的时间戳。如果没有以前的文档，这个值将与fetchStart相同")]),n._v(" "),e("li",[n._v("unloadEventStart：表示窗口中的前一个网页（与当前页面同域）unload的时间戳。如果没有前一个网页，或者前一个网页和当前页面不是同域，则返回值为0。")]),n._v(" "),e("li",[n._v("unloadEventEnd：表示当unload事件结束时的时间戳。 果没有前一个网页，或者前一个网页和当前页面不是同域，则返回值为0。")]),n._v(" "),e("li",[n._v("redirectStart：表示当第一个HTTP重定向开始时的时间戳。如果没有重定向，或者其中一个重定向不是同域，则返回值为0。")]),n._v(" "),e("li",[n._v("redirectEnd：表示当最后一个HTTP重定向完成时，即接收到HTTP响应的最后一个字节时的时间戳。如果没有重定向，或者其中一个重定向不是同域，则返回值为0。")]),n._v(" "),e("li",[n._v("fetchStart：表示当浏览器准备好使用HTTP请求获取文档时的时间戳。这个时刻是发生在检查任何应用程序缓存之前。")]),n._v(" "),e("li",[n._v("domainLookupStart：表示当DNS域名查询开始时的时间戳。如果使用了持久连接，或者信息存储在缓存或本地资源中（即无DNS查询），则该值将与fetchStart相同。")]),n._v(" "),e("li",[n._v("domainLookupEnd：表示当DNS域名查询完成时的时间戳。如果使用了持久连接，或者信息存储在缓存或本地资源中（即无DNS查询），则该值将与fetchStart相同。")]),n._v(" "),e("li",[n._v("connectStart：表示HTTP TCP开始建立连接的时间戳。如果传输层报告了一个错误，并且重新开始建立连接，则给出最后一次建立连接的开始时间戳。如果使用持久连接，则该值与fetchStart相同。")]),n._v(" "),e("li",[n._v("connectEnd：表示HTTP TCP完成建立连接（完成握手）的时间戳。如果传输层报告了一个错误，并且重新开始建立连接，则给出最后建立连接的结束时间。如果使用持久连接，则该值与fetchStart相同。当所有安全连接握手或SOCKS身份验证都被终止时，该连接被视为已打开。")]),n._v(" "),e("li",[n._v("secureConnectionStart：表示当安全连接握手（HTTPS连接）开始时的时间戳。如果没有安全连接，则返回0。")]),n._v(" "),e("li",[n._v("requestStart：表示浏览器发送请求从服务器或本地缓存中获取实际文档的时间戳。如果传输层在请求开始后失败，并且连接重新打开，则此属性将被设置为与新请求对应的时间。")]),n._v(" "),e("li",[n._v("responseStart：表示当浏览器从服务器的缓存或本地资源接收到响应的第一个字节时的时间戳。")]),n._v(" "),e("li",[n._v("responseEnd：表示当浏览器从服务器、缓存或本地资源接收到响应的最后一个字节时或者当连接被关闭时(如果这是首先发生的)的时间戳。")]),n._v(" "),e("li",[n._v("domLoading：表示当解析器开始工作，也就是开始渲染dom树的时间戳。这时document.readyState变为'loading'，相应的readystatechange事件被抛出。")]),n._v(" "),e("li",[n._v("domInteractive：表示解析器完成解析dom树的时间戳，这时document.readyState变为'interactive'，相应的readystatechange事件被抛出。这时候只是解析完成DOM树，还没开始加载网页内的资源。")]),n._v(" "),e("li",[n._v("domContentLoadedEventStart：表示DOM解析完成后，网页内的资源开始加载的时间戳。就在解析器发送DOMContentLoaded事件之前。")]),n._v(" "),e("li",[n._v("domContentLoadedEventEnd：表示DOM解析完成后，网页内的资源加载完成的时间戳。即在所有需要尽快执行的脚本(按顺序或不按顺序)被执行之后。")]),n._v(" "),e("li",[n._v("domComplete：表示当解析器完成它在主文档上的工作时，也就是DOM解析完成，且资源也准备就绪的时间。document.readyState变为'complete'，相应的readystatechange事件被抛出。")]),n._v(" "),e("li",[n._v("loadEventStart：表示当为当前文档发送load事件时，也就是load回调函数开始执行的时间。如果这个事件还没有被发送，它将返回0。")]),n._v(" "),e("li",[n._v("loadEventEnd：表示当load事件的回调函数执行完毕的时间，即加载事件完成时。如果这个事件还没有被发送，或者还没有完成，它将返回0。")])]),n._v(" "),e("p",[n._v("借助performance.timing里面的各个时间戳，我们可以获取到")]),n._v(" "),e("ul",[e("li",[n._v("DNS解析耗时 :  performance.timing.domainLookupEnd - performance.timing.domainLookupStart")]),n._v(" "),e("li",[n._v("TCP连接耗时 :  performance.timing.connectEnd - performance.timing.connectStart")]),n._v(" "),e("li",[n._v("SSL连接耗时 :  performance.timing.connectEnd - performance.timing.secureConnectionStart")]),n._v(" "),e("li",[n._v("request耗时 :  performance.timing.responseEnd - performance.timing.responseStart")]),n._v(" "),e("li",[n._v("解析DOM树耗时 :  performance.timing.domComplete - performance.timing.domInteractive")]),n._v(" "),e("li",[n._v("domready时间 : performance.timing.domContentLoadedEventEnd - performance.timing.fetchStart")]),n._v(" "),e("li",[n._v("onload时间 : performance.timing.loadEventEnd - performance.timing.fetchStart")])]),n._v(" "),e("h3",{attrs:{id:"各项指标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各项指标"}},[n._v("#")]),n._v(" 各项指标")]),n._v(" "),e("p",[n._v("以下指标如果手动计算的话需要在 window.onload 事件中计算，在此之前计算的话因为所有的数据都有可能不断变化")]),n._v(" "),e("ul",[e("li",[n._v("FCP：首屏时间，首次内容绘制的时间，指页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("console.log(\n    \"FCP：\" +\n      performance.getEntriesByName(\"first-contentful-paint\")[0].startTime\n);\n\nnew PerformanceObserver((entryList) => {\n  for (const entry of entryList.getEntriesByName('first-contentful-paint')) {\n    console.log('FCP candidate:', entry.startTime, entry)\n  }\n}).observe({ type: 'paint', buffered: true })\n\nimport {getFCP} from 'web-vitals';\n\n// 当 FCP 可用时立即进行测量和记录。\ngetFCP(console.log);\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("ul",[e("li",[n._v("FP：白屏时间，首次渲染的时间点。FP和FCP有点像，但FP一定先于FCP发生，例如一个页面加载时，第一个DOM还没绘制完成，但是可能这时页面的背景颜色已经出来了，这时FP指标就被记录下来了。而FCP会在页面绘制完第一个 DOM 内容后记录。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('console.log(\n    "FP：" + performance.getEntriesByName("first-paint")[0].startTime\n  );\n\nnew PerformanceObserver((entryList) => {\n  for (const entry of entryList.getEntriesByName("first-paint")) {\n    console.log("FP:", entry.startTime, entry);\n  }\n}).observe({ type: "paint", buffered: true });\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("ul",[e("li",[n._v("LCP：根据页面开始加载的时间报告可视区域内可见的最大图像或文本块完成渲染的计算时间，用于测验加载性能，衡量网站初次载入速度。 应该控制该值在2.5 秒以内；最大指元素的尺寸大小，这个大小不包括可视区域之外或者是被裁剪的不可见的溢出。也不包括元素的Margin / Padding / Border等。")])]),n._v(" "),e("p",[n._v("利用 PerformanceObserver 构造函数创建一个性能检测对象，最新的largest-contentful-paint条目的startTime就是LCP值")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let observer = new PerformanceObserver((entryList) => {\n  for (const entry of entryList.getEntries()) {\n    console.log('LCP candidate:', entry.startTime, entry);\n  }\n});\nobserver.observe({ type: \"largest-contentful-paint\", buffered: true });\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("ul",[e("li",[n._v("FID：首次输入延迟时间，主要为了测量页面加载期间响应度，测量交互性。为了提供良好的用户体验，页面的 FID 应为100 毫秒或更短。测量用户第一次与页面交互（单击链接、点按按钮等等）到浏览器对交互作出响应，并实际能够开始处理事件处理程序所经过的时间。")])]),n._v(" "),e("p",[n._v("创建PerformanceObserver对象监听 first-input 类型的条目，并获取条目的startTime和processingStart时间戳的差值作为结果")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\nnew PerformanceObserver((entryList) => {\n  for (const entry of entryList.getEntries()) {\n    const delay = entry.processingStart - entry.startTime;\n    console.log('FID candidate:', delay, entry);\n  }\n}).observe({type: 'first-input', buffered: true});\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("ul",[e("li",[n._v("CLS：累积布局偏移，测量视觉稳定性。为了提供良好的用户体验，页面的 CLS 应保持在 0.1. 或更少。CLS是测量整个页面生命周期内发生的所有意外布局偏移中最大一连串的布局偏移分数。每当一个可见元素从一个已渲染帧变更到另一个已渲染帧时，就是发生了布局偏移。所谓一连串布局偏移，是指一个或者多个的布局偏移，这些偏移相隔少于1秒，总持续时间最大为5秒。而最大一连串就是所有的一连串布局偏移中偏移累计分数最大的一连串。")])]),n._v(" "),e("p",[n._v("测量CLS的原理是，创建一个PerformanceObserver对象来侦听意外偏移layout-shift条目")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let clsValue = 0;\nlet clsEntries = [];\n\nlet sessionValue = 0;\nlet sessionEntries = [];\n\nnew PerformanceObserver((entryList) => {\n  for (const entry of entryList.getEntries()) {\n    // 只将不带有最近用户输入标志的布局偏移计算在内。\n    if (!entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // 如果条目与上一条目的相隔时间小于 1 秒且\n      // 与会话中第一个条目的相隔时间小于 5 秒，那么将条目\n      // 包含在当前会话中。否则，开始一个新会话。\n      if (sessionValue &&\n          entry.startTime - lastSessionEntry.startTime < 1000 &&\n          entry.startTime - firstSessionEntry.startTime < 5000) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // 如果当前会话值大于当前 CLS 值，\n      // 那么更新 CLS 及其相关条目。\n      if (sessionValue > clsValue) {\n        clsValue = sessionValue;\n        clsEntries = sessionEntries;\n\n        // 将更新值（及其条目）记录在控制台中。\n        console.log('CLS:', clsValue, clsEntries)\n      }\n    }\n  }\n}).observe({type: 'layout-shift', buffered: true});\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br")])]),e("ul",[e("li",[n._v("TTFB：首包时间，资源请求到获取第一个字节之间的时间，包括以下阶段的总和")])]),n._v(" "),e("p",[n._v("重定向时间\nService Worker 启动时间（如果适用）\nDNS 查询\n连接和 TLS 协商\n请求，直到响应的第一个字节到达")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("console.log(\n  'TTFB：' +\n    (performance.timing.responseStart - performance.timing.navigationStart)\n)\n\nnew PerformanceObserver((entryList) => {\n  const [pageNav] = entryList.getEntriesByType('navigation')\n  console.log(`TTFB: ${pageNav.responseStart}`)\n}).observe({\n  type: 'navigation',\n  buffered: true,\n})\n\nimport {getTTFB} from 'web-vitals';\n\n// 当 TTFB 可用时立即进行测量和记录。\ngetTTFB(console.log);\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])]),e("ul",[e("li",[n._v("SI：速度指数衡量页面加载期间内容的视觉显示速度，也就是页面填充快慢的指标。")])]),n._v(" "),e("p",[n._v("良好的SI应该控制在3.4以内。")]),n._v(" "),e("ul",[e("li",[n._v("TTI：可交互时间，指标测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。")])]),n._v(" "),e("p",[n._v("良好的TTI应该控制在5秒以内。")]),n._v(" "),e("ul",[e("li",[n._v("TBT：总阻塞时间，也就是从FCP到TTI之间的时间。")])]),n._v(" "),e("h2",{attrs:{id:"性能测试工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能测试工具"}},[n._v("#")]),n._v(" 性能测试工具")]),n._v(" "),e("h3",{attrs:{id:"lighthouse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lighthouse"}},[n._v("#")]),n._v(" Lighthouse")]),n._v(" "),e("ul",[e("li",[n._v("Lighthouse是谷歌官方开发的性能分析工具，目前已经嵌入到 chrome 开发者工具的选项卡中，不需要额外安装，可以直接使用。")]),n._v(" "),e("li",[n._v("报告会包含 FCP、TTI、SI、TBT、LCP、CLS 六个指标数据，但是无法测试FID。")])]),n._v(" "),e("p",[n._v("还有总的性能评分，以及SEO的分数和一些其他的优化建议等等，总的来说报告数据算是很齐全的。")]),n._v(" "),e("h3",{attrs:{id:"pagespeed-insights-性能测试网站"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pagespeed-insights-性能测试网站"}},[n._v("#")]),n._v(" PageSpeed Insights 性能测试网站")]),n._v(" "),e("p",[n._v("https://pagespeed.web.dev/")]),n._v(" "),e("p",[n._v("输入网址就可以测试性能的网站，基本该有的指标数据都有，包括Lighthouse暂不支持的FID。")]),n._v(" "),e("h3",{attrs:{id:"webpagetest-性能测试网站"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpagetest-性能测试网站"}},[n._v("#")]),n._v(" WebPageTest 性能测试网站")]),n._v(" "),e("p",[n._v("https://www.webpagetest.org/")]),n._v(" "),e("p",[n._v("同样是一个输入网址就可以测试性能的网站。")]),n._v(" "),e("p",[n._v("可以选择全球各地进行性能测试，同样提供详细的检查结果报告，包括清晰的瀑布图数据，以及相关的优化建议。")]),n._v(" "),e("p",[n._v("有个问题就是这个网站测试要排队，往往要等一会才出结果。")])])}),[],!1,null,null,null);e.default=a.exports}}]);