(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{521:function(a,s,n){"use strict";n.r(s);var e=n(3),i=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"基本流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本流程"}},[a._v("#")]),a._v(" 基本流程")]),a._v(" "),s("p",[a._v("input 读取到 文件 ，使用 FileReader 将其转换为 base64 编码\n新建 img ，使其 src 指向刚刚的 base64\n新建 canvas ，将 img 画到 canvas 上\n利用 canvas.toDataURL/toBlob 将 canvas 导出为 base64 或 Blob\n将 base64 或 Blob 转化为 File")]),a._v(" "),s("h3",{attrs:{id:"filereader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#filereader"}},[a._v("#")]),a._v(" FileReader")]),a._v(" "),s("p",[a._v("FileReader 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用File或 Blob对象指定要读取的文件或数据。\n通俗来讲，就是这个对象是用来读取File对象或Blob对象的。File对象就是"),s("code",[a._v('<input type="file">')]),a._v("获取到的对象")]),a._v(" "),s("ul",[s("li",[a._v("FileReader.onload:处理load事件。即该钩子在读取操作完成时触发，通过该钩子函数可以完成例如读取完图片后进行预览的操作，或读取完图片后对图片内容进行二次处理等操作。")]),a._v(" "),s("li",[a._v("FileReader.readAsDataURL：读取方法，并且读取完成后，result属性将返回 Data URL 格式（Base64 编码）的字符串，代表图片内容。")]),a._v(" "),s("li",[a._v("除了用到的这个钩子和这个实例方法外，FileReader对象还有onabort、onerror、onloadstart、onloadend、onprogress等钩子；也有abort()、readAsArrayBuffer、readAsBinaryString等实例方法")])]),a._v(" "),s("h3",{attrs:{id:"canvas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#canvas"}},[a._v("#")]),a._v(" canvas")]),a._v(" "),s("p",[a._v("图片压缩最核心的在canvas这里，先使用CanvasRenderingContext2D.drawImage()方法将选中的图片文件在画布上绘制出来，再使用Canvas.toDataURL()将画布上的图片信息转换成base64(DataURL)格式的数据")]),a._v(" "),s("ul",[s("li",[a._v("CanvasRenderingContext2D.drawImage()：CanvasRenderingContext2D上的绘制图片的方法")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("该方法所接受的9个参数：")]),a._v(" "),s("ul",[s("li",[a._v("image:Object;绘制在Canvas上的元素，可以是各类Canvas图片资源），如图片，SVG图像，Canvas元素本身等。")]),a._v(" "),s("li",[a._v("dx:Number;在Canvas画布上规划一片区域用来放置图片，dx就是这片区域的左上角横坐标。")]),a._v(" "),s("li",[a._v("dy:Nmuber;在Canvas画布上规划一片区域用来放置图片，dy就是这片区域的左上角纵坐标。")]),a._v(" "),s("li",[a._v("dWidth:Number；在Canvas画布上规划一片区域用来放置图片，dWidth就是这片区域的宽度。")]),a._v(" "),s("li",[a._v("dHeight:Number；在在Canvas画布上规划一片区域用来放置图片，dHeight就是这片区域的高度。")]),a._v(" "),s("li",[a._v("sx:Number；表示图片元素绘制在Canvas画布上起始横坐标。")]),a._v(" "),s("li",[a._v("sy:Number；表示图片元素绘制在Canvas画布上起始纵坐标。")]),a._v(" "),s("li",[a._v("sWidth:Number；表示图片元素从坐标点开始算，多大的宽度内容绘制Canvas画布上。")]),a._v(" "),s("li",[a._v("sHeight；表示图片元素从坐标点开始算，多大的高度内容绘制Canvas画布上。")])]),a._v(" "),s("p",[a._v("实际上只使用到了5个参数")]),a._v(" "),s("h3",{attrs:{id:"canvas-todataurl-图片压缩的核心。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#canvas-todataurl-图片压缩的核心。"}},[a._v("#")]),a._v(" Canvas.toDataURl() 图片压缩的核心。")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("canvas.toDataURL(mimeType, quality);\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("Canvas.toDataURl()方法可以将canvas画布上的信息转换为base64(DataURL)格式的图像信息，纯字符的图片表示形式。该方法接收2个参数：")]),a._v(" "),s("ul",[s("li",[a._v("mimeType(可选)：String；表示需要转换的图像的mimeType类型。默认值是image/png，还可以是image/jpeg，甚至image/webp（前提浏览器支持）等。")]),a._v(" "),s("li",[a._v("quailty(可选)：Number；quality表示转换的图片质量。范围是0到1。此参数要想有效，图片的mimeType需要是image/jpeg或者image/webp，其他mimeType值无效。默认压缩质量是0.92。")])]),a._v(" "),s("p",[a._v("该方法为同步方法，如果需要转换的Canvas尺寸很大，则会阻塞脚本的运行，因此需要注意控制Canvas的尺寸")]),a._v(" "),s("p",[a._v("这个默认值得到的图片往往比原图的图片质量要高，图片往往比原图大。")]),a._v(" "),s("p",[a._v("当quality在0.2~0.5之间，图片质量变化并不大，quality的值越小，压缩效率越可观（也就是在0.2左右时，压缩图片可以最大化，同时并不对图片质量造成太大影响）")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("另外，图片的尺寸也会影响，一个14M的原图（6016X4016）不改变质量只改变尺寸的前提下压缩后（1400X935）就剩139.62KB，尺寸的限制能最大化提高压缩效率")])]),a._v(" "),s("li",[s("p",[a._v("Canvas.toBlob()："),s("code",[a._v("canvas.toBlob(callback, mimeType, quality)")])])])]),a._v(" "),s("p",[a._v("将canvas画布上的信息转换为Blob对象。该方法接收的参数基本与toDataURL()的方法相同，区别在于，该方法多接受一个参数，该参数为：")]),a._v(" "),s("ul",[s("li",[a._v("callback:Function；toBlob()方法执行成功后的回调方法，支持一个参数，表示当前转换的Blob对象。\ntoDataURL()方法是同步方法，toBlob()不同，它是一个异步的方法，所以该方法会多接受一个参数callback，该参数就是toBlob()的回调函数。如果后端只接受二进制的图片信息的话，将file压缩后，再转换成Blob对象上传至后端")])]),a._v(" "),s("h2",{attrs:{id:"代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[a._v("#")]),a._v(" 代码")]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("\n  /**\n   * 压缩图片方法\n   * @param {file} file 文件\n   * @param {Number} quality 图片质量(取值0-1之间默认0.92)\n   */\n  compressImg(file, quality) {\n    var qualitys = 0.52\n    console.log(parseInt((file.size / 1024).toFixed(2)))\n    if (parseInt((file.size / 1024).toFixed(2)) < 1024) {\n      qualitys = 0.85\n    }\n    if (5 * 1024 < parseInt((file.size / 1024).toFixed(2))) {\n      qualitys = 0.92\n    }\n    if (quality) {\n      qualitys = quality\n    }\n    if (file[0]) {\n      return Promise.all(Array.from(file).map(e => this.compressImg(e,\n        qualitys))) // 如果是 file 数组返回 Promise 数组\n    } else {\n      return new Promise((resolve) => {\n        console.log(file)\n        if ((file.size / 1024).toFixed(2) < 300) {\n          resolve({\n            file: file\n          })\n        } else {\n          const reader = new FileReader() // 创建 FileReader\n          reader.onload = ({\n            target: {\n              result: src\n            }\n          }) => {\n            const image = new Image() // 创建 img 元素\n            image.onload = async() => {\n              const canvas = document.createElement('canvas') // 创建 canvas 元素\n              const context = canvas.getContext('2d')\n              var targetWidth = image.width\n              var targetHeight = image.height\n              var originWidth = image.width\n              var originHeight = image.height\n              if (1 * 1024 <= parseInt((file.size / 1024).toFixed(2)) && parseInt((file.size / 1024).toFixed(2)) <= 10 * 1024) {\n                var maxWidth = 1600\n                var maxHeight = 1600\n                targetWidth = originWidth\n                targetHeight = originHeight\n                // 图片尺寸超过的限制\n                if (originWidth > maxWidth || originHeight > maxHeight) {\n                  if (originWidth / originHeight > maxWidth / maxHeight) {\n                    // 更宽，按照宽度限定尺寸\n                    targetWidth = maxWidth\n                    targetHeight = Math.round(maxWidth * (originHeight / originWidth))\n                  } else {\n                    targetHeight = maxHeight\n                    targetWidth = Math.round(maxHeight * (originWidth / originHeight))\n                  }\n                }\n              }\n              if (10 * 1024 <= parseInt((file.size / 1024).toFixed(2)) && parseInt((file.size / 1024).toFixed(2)) <= 20 * 1024) {\n                maxWidth = 1400\n                maxHeight = 1400\n                targetWidth = originWidth\n                targetHeight = originHeight\n                // 图片尺寸超过的限制\n                if (originWidth > maxWidth || originHeight > maxHeight) {\n                  if (originWidth / originHeight > maxWidth / maxHeight) {\n                    // 更宽，按照宽度限定尺寸\n                    targetWidth = maxWidth\n                    targetHeight = Math.round(maxWidth * (originHeight / originWidth))\n                  } else {\n                    targetHeight = maxHeight\n                    targetWidth = Math.round(maxHeight * (originWidth / originHeight))\n                  }\n                }\n              }\n              canvas.width = targetWidth\n              canvas.height = targetHeight\n              context.clearRect(0, 0, targetWidth, targetHeight)\n              context.drawImage(image, 0, 0, targetWidth, targetHeight) // 绘制 canvas\n              const canvasURL = canvas.toDataURL('image/jpeg', qualitys)\n              const buffer = atob(canvasURL.split(',')[1]) // window.atob() 是解密 base64 的方法\n              let length = buffer.length\n              const bufferArray = new Uint8Array(new ArrayBuffer(length))\n              while (length--) {\n                bufferArray[length] = buffer.charCodeAt(length)\n              }\n              const miniFile = new File([bufferArray], file.name, {\n                type: 'image/jpeg'\n              })\n              console.log({\n                file: miniFile,\n                origin: file,\n                beforeSrc: src,\n                afterSrc: canvasURL,\n                beforeKB: Number((file.size / 1024).toFixed(2)),\n                afterKB: Number((miniFile.size / 1024).toFixed(2)),\n                qualitys: qualitys\n              })\n              resolve({\n                file: miniFile, // 要上传的压缩后的图片\n                origin: file,\n                beforeSrc: src,\n                afterSrc: canvasURL,\n                beforeKB: Number((file.size / 1024).toFixed(2)),\n                afterKB: Number((miniFile.size / 1024).toFixed(2))\n              })\n            }\n            image.src = src\n          }\n          reader.readAsDataURL(file)\n        }\n      })\n    }\n  },\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br"),s("span",{staticClass:"line-number"},[a._v("13")]),s("br"),s("span",{staticClass:"line-number"},[a._v("14")]),s("br"),s("span",{staticClass:"line-number"},[a._v("15")]),s("br"),s("span",{staticClass:"line-number"},[a._v("16")]),s("br"),s("span",{staticClass:"line-number"},[a._v("17")]),s("br"),s("span",{staticClass:"line-number"},[a._v("18")]),s("br"),s("span",{staticClass:"line-number"},[a._v("19")]),s("br"),s("span",{staticClass:"line-number"},[a._v("20")]),s("br"),s("span",{staticClass:"line-number"},[a._v("21")]),s("br"),s("span",{staticClass:"line-number"},[a._v("22")]),s("br"),s("span",{staticClass:"line-number"},[a._v("23")]),s("br"),s("span",{staticClass:"line-number"},[a._v("24")]),s("br"),s("span",{staticClass:"line-number"},[a._v("25")]),s("br"),s("span",{staticClass:"line-number"},[a._v("26")]),s("br"),s("span",{staticClass:"line-number"},[a._v("27")]),s("br"),s("span",{staticClass:"line-number"},[a._v("28")]),s("br"),s("span",{staticClass:"line-number"},[a._v("29")]),s("br"),s("span",{staticClass:"line-number"},[a._v("30")]),s("br"),s("span",{staticClass:"line-number"},[a._v("31")]),s("br"),s("span",{staticClass:"line-number"},[a._v("32")]),s("br"),s("span",{staticClass:"line-number"},[a._v("33")]),s("br"),s("span",{staticClass:"line-number"},[a._v("34")]),s("br"),s("span",{staticClass:"line-number"},[a._v("35")]),s("br"),s("span",{staticClass:"line-number"},[a._v("36")]),s("br"),s("span",{staticClass:"line-number"},[a._v("37")]),s("br"),s("span",{staticClass:"line-number"},[a._v("38")]),s("br"),s("span",{staticClass:"line-number"},[a._v("39")]),s("br"),s("span",{staticClass:"line-number"},[a._v("40")]),s("br"),s("span",{staticClass:"line-number"},[a._v("41")]),s("br"),s("span",{staticClass:"line-number"},[a._v("42")]),s("br"),s("span",{staticClass:"line-number"},[a._v("43")]),s("br"),s("span",{staticClass:"line-number"},[a._v("44")]),s("br"),s("span",{staticClass:"line-number"},[a._v("45")]),s("br"),s("span",{staticClass:"line-number"},[a._v("46")]),s("br"),s("span",{staticClass:"line-number"},[a._v("47")]),s("br"),s("span",{staticClass:"line-number"},[a._v("48")]),s("br"),s("span",{staticClass:"line-number"},[a._v("49")]),s("br"),s("span",{staticClass:"line-number"},[a._v("50")]),s("br"),s("span",{staticClass:"line-number"},[a._v("51")]),s("br"),s("span",{staticClass:"line-number"},[a._v("52")]),s("br"),s("span",{staticClass:"line-number"},[a._v("53")]),s("br"),s("span",{staticClass:"line-number"},[a._v("54")]),s("br"),s("span",{staticClass:"line-number"},[a._v("55")]),s("br"),s("span",{staticClass:"line-number"},[a._v("56")]),s("br"),s("span",{staticClass:"line-number"},[a._v("57")]),s("br"),s("span",{staticClass:"line-number"},[a._v("58")]),s("br"),s("span",{staticClass:"line-number"},[a._v("59")]),s("br"),s("span",{staticClass:"line-number"},[a._v("60")]),s("br"),s("span",{staticClass:"line-number"},[a._v("61")]),s("br"),s("span",{staticClass:"line-number"},[a._v("62")]),s("br"),s("span",{staticClass:"line-number"},[a._v("63")]),s("br"),s("span",{staticClass:"line-number"},[a._v("64")]),s("br"),s("span",{staticClass:"line-number"},[a._v("65")]),s("br"),s("span",{staticClass:"line-number"},[a._v("66")]),s("br"),s("span",{staticClass:"line-number"},[a._v("67")]),s("br"),s("span",{staticClass:"line-number"},[a._v("68")]),s("br"),s("span",{staticClass:"line-number"},[a._v("69")]),s("br"),s("span",{staticClass:"line-number"},[a._v("70")]),s("br"),s("span",{staticClass:"line-number"},[a._v("71")]),s("br"),s("span",{staticClass:"line-number"},[a._v("72")]),s("br"),s("span",{staticClass:"line-number"},[a._v("73")]),s("br"),s("span",{staticClass:"line-number"},[a._v("74")]),s("br"),s("span",{staticClass:"line-number"},[a._v("75")]),s("br"),s("span",{staticClass:"line-number"},[a._v("76")]),s("br"),s("span",{staticClass:"line-number"},[a._v("77")]),s("br"),s("span",{staticClass:"line-number"},[a._v("78")]),s("br"),s("span",{staticClass:"line-number"},[a._v("79")]),s("br"),s("span",{staticClass:"line-number"},[a._v("80")]),s("br"),s("span",{staticClass:"line-number"},[a._v("81")]),s("br"),s("span",{staticClass:"line-number"},[a._v("82")]),s("br"),s("span",{staticClass:"line-number"},[a._v("83")]),s("br"),s("span",{staticClass:"line-number"},[a._v("84")]),s("br"),s("span",{staticClass:"line-number"},[a._v("85")]),s("br"),s("span",{staticClass:"line-number"},[a._v("86")]),s("br"),s("span",{staticClass:"line-number"},[a._v("87")]),s("br"),s("span",{staticClass:"line-number"},[a._v("88")]),s("br"),s("span",{staticClass:"line-number"},[a._v("89")]),s("br"),s("span",{staticClass:"line-number"},[a._v("90")]),s("br"),s("span",{staticClass:"line-number"},[a._v("91")]),s("br"),s("span",{staticClass:"line-number"},[a._v("92")]),s("br"),s("span",{staticClass:"line-number"},[a._v("93")]),s("br"),s("span",{staticClass:"line-number"},[a._v("94")]),s("br"),s("span",{staticClass:"line-number"},[a._v("95")]),s("br"),s("span",{staticClass:"line-number"},[a._v("96")]),s("br"),s("span",{staticClass:"line-number"},[a._v("97")]),s("br"),s("span",{staticClass:"line-number"},[a._v("98")]),s("br"),s("span",{staticClass:"line-number"},[a._v("99")]),s("br"),s("span",{staticClass:"line-number"},[a._v("100")]),s("br"),s("span",{staticClass:"line-number"},[a._v("101")]),s("br"),s("span",{staticClass:"line-number"},[a._v("102")]),s("br"),s("span",{staticClass:"line-number"},[a._v("103")]),s("br"),s("span",{staticClass:"line-number"},[a._v("104")]),s("br"),s("span",{staticClass:"line-number"},[a._v("105")]),s("br"),s("span",{staticClass:"line-number"},[a._v("106")]),s("br"),s("span",{staticClass:"line-number"},[a._v("107")]),s("br"),s("span",{staticClass:"line-number"},[a._v("108")]),s("br"),s("span",{staticClass:"line-number"},[a._v("109")]),s("br"),s("span",{staticClass:"line-number"},[a._v("110")]),s("br"),s("span",{staticClass:"line-number"},[a._v("111")]),s("br"),s("span",{staticClass:"line-number"},[a._v("112")]),s("br"),s("span",{staticClass:"line-number"},[a._v("113")]),s("br"),s("span",{staticClass:"line-number"},[a._v("114")]),s("br"),s("span",{staticClass:"line-number"},[a._v("115")]),s("br"),s("span",{staticClass:"line-number"},[a._v("116")]),s("br")])])])}),[],!1,null,null,null);s.default=i.exports}}]);