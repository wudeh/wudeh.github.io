(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{487:function(s,a,e){"use strict";e.r(a);var n=e(3),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"es7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es7"}},[s._v("#")]),s._v(" ES7")]),s._v(" "),a("h3",{attrs:{id:"includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#includes"}},[s._v("#")]),s._v(" includes")]),s._v(" "),a("p",[s._v("includes 函数是 String 和 Array 共有的一个函数，他们都是用来判断子元素是否在一个对象（字符串/数组）内部。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// String\n'aaabbbccc'.includes('bbb'); // true\n'aaabbbccc'.includes('ddd'); // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// Array\n[1, 2, 3, 4].includes(1); // true\n[1, 2, 3, 4].includes(5); // false\n[1, 2, NaN].indexOf(NaN); // -1\n[1, 2, NaN].incldes(NaN); // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("includes 与之前的 indexOf 的区别有两点：")]),s._v(" "),a("ul",[a("li",[s._v("indexOf 返回的是位置，number 类型；includes 返回的是 bool 类型")]),s._v(" "),a("li",[s._v("includes 可以判断 NaN 是否在数组里；indexOf 则不能")])]),s._v(" "),a("h3",{attrs:{id:"幂指运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#幂指运算"}},[s._v("#")]),s._v(" 幂指运算")]),s._v(" "),a("p",[s._v("这里就是一个语法糖。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// ES5 求幂\nMath.pow(3, 2); // 9\n\n// ES7 求幂\n\n3 ** 2； // 9\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"es8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es8"}},[s._v("#")]),s._v(" ES8")]),s._v(" "),a("h3",{attrs:{id:"async-await-异步操作关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await-异步操作关键字"}},[s._v("#")]),s._v(" async/await-异步操作关键字")]),s._v(" "),a("h3",{attrs:{id:"values-entries-遍历对象新方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#values-entries-遍历对象新方式"}},[s._v("#")]),s._v(" values()/entries()-遍历对象新方式")]),s._v(" "),a("p",[s._v("Object.values()返回一个数组，包含对象自身的所有可遍历的属性值")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const user = {name: "Sam", age: "25"}\nObject.values(user) // ["Sam", "25"]\n\nconst obj = { 100: \'a\', 2: \'b\', 7: \'c\' };\nObject.values(obj) // ["b", "c", "a"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("需要注意的是，如果属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是 b、c、a。")])]),s._v(" "),a("p",[s._v("Object.entries() 同样返回一个数组，包含对象自身的所有可比案例的键值和属性的数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const user = {name: "Sam", age: "25"}\nObject.entries(user) // [["name", "Sam"], ["age", "25"]]\n\nconst obj = { 100: \'a\', 2: \'b\', 7: \'c\' };\nObject.entries(obj) // [["2", "b"], ["7", "c"], ["100", "a"]]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"string-padding-字符串填充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-padding-字符串填充"}},[s._v("#")]),s._v(" String padding-字符串填充")]),s._v(" "),a("p",[s._v("对 String 新增了两个实例函数，分别是padStart和padEnd，意味将字符创添加到原始字符串的开头或结尾。 padStart和padEnd都允许接受两个参数：")]),s._v(" "),a("ul",[a("li",[s._v("targetLength：当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。")]),s._v(" "),a("li",[s._v('padString：(可选)填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 " "。')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let str = 'Sam'\nstr.padStart(6,'its')// 'itsSam'\nstr.padEnd(6,'its')// 'Samits'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"getownpropertydescriptors-返回元素自身属性描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getownpropertydescriptors-返回元素自身属性描述"}},[s._v("#")]),s._v(" getOwnPropertyDescriptors-返回元素自身属性描述")]),s._v(" "),a("p",[s._v("如果想获取某个元素的自身属性描述，可以使用Object.getOwnPropertyDescriptors()如果没有任何属性，则会返回空对象。")]),s._v(" "),a("p",[s._v("使用其可以解决Object.assign()无法正确拷贝 get 和 set 的问题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const obj = {name: "Sam"}\nObject.getOwnPropertyDescriptors(obj)\n\n// name:\n// configurable: true\n// enumerable: true\n// value: "Sam"\n// writable: true\n// __proto__: Object\n// __proto__: Object\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"es9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es9"}},[s._v("#")]),s._v(" ES9")]),s._v(" "),a("h3",{attrs:{id:"for-await-of-异步迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-await-of-异步迭代器"}},[s._v("#")]),s._v(" for await of-异步迭代器")]),s._v(" "),a("p",[s._v("在 async/await中使用循环中去调用异步函数，则不会正常执行")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function demo(arr) {\n  for (let i of arr) {\n    await handleDo(i);\n  }\n}\n// 该示例中，循环本身仍然保持着同步操作，并在内部异步函数之前，全部调用完成结束\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("ES9 中引入了异步迭代器，允许在循环中去调用异步函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function demo(arr) {\n  for await (let i of arr) {\n    handleDo(i);\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"promise-finally-promise-结束触发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-finally-promise-结束触发"}},[s._v("#")]),s._v(" Promise.finally()-Promise 结束触发")]),s._v(" "),a("h3",{attrs:{id:"rest-spread-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rest-spread-属性"}},[s._v("#")]),s._v(" Rest/Spread 属性")]),s._v(" "),a("p",[s._v("Rest参数语法允许我们将一个不定数量的参数表示为一个数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("restParam(1, 2, 3, 4, 5);\n\nfunction restParam(p1, p2, ...p3) {\n  // p1 = 1\n  // p2 = 2\n  // p3 = [3, 4, 5]\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("ES9为对象解构提供了和数组一样的Rest参数和展开操作符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const Obj = {a: 1, b: 2, c: 3};\nconst { a, ...x } = Obj;// a = 1,x = { b: 2, c: 3 }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"正则表达式新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式新特性"}},[s._v("#")]),s._v(" 正则表达式新特性")]),s._v(" "),a("p",[s._v("s (dotAll) 标志")]),s._v(" "),a("ul",[a("li",[s._v("s(dotAll)flag 正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用 u 修饰符解决；另一个是行终止符, 如换行符 (n) 或回车符 (r), 这个可以通过 ES9 的 s(dotAll)flag，在原正则表达式基础上添加 s 表示：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(/foo.bar/.test('foo\\nbar')) // false\nconsole.log(/foo.bar/s.test('foo\\nbar')) // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如何判断当前正则是否使用了 dotAll 模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const re = /foo.bar/s // Or, `const re = new RegExp('foo.bar', 's');`.\nconsole.log(re.test('foo\\nbar')) // true\nconsole.log(re.dotAll) // true\nconsole.log(re.flags) // 's'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("命名捕获组")]),s._v(" "),a("blockquote",[a("p",[s._v("在一些正则表达式模式中，使用数字进行匹配可能会令人混淆。因为美式英语中的日期表示法和英式英语中的日期表示法不同，所以很难区分哪一组表示日期，哪一组表示月份：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const re = /(\\d{4})-(\\d{2})-(\\d{2})/;\nconst match= re.exec('2019-01-01');\nconsole.log(match[0]); // → 2019-01-01\nconsole.log(match[1]); // → 2019\nconsole.log(match[2]); // → 01\nconsole.log(match[3]); // → 01\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("ES9 引入了命名捕获组，允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\nconst match = re.exec(\'2019-01-01\');\nconsole.log(match.groups); // → {year: "2019", month: "01", day: "01"}\nconsole.log(match.groups.year); // → 2019\nconsole.log(match.groups.month); // → 01\nconsole.log(match.groups.day); // → 01\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);