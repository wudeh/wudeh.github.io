(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{603:function(n,s,a){"use strict";a.r(s);var e=a(3),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("简单解释就是 假如 类型A 是 类型B 的子类型（类型系统中，类型属性更具体的是子类型，属性更少则说明该类型约束的更宽泛，称为父类型）")]),n._v(" "),s("ul",[s("li",[n._v("协变：指 A 可以赋值给 B")]),n._v(" "),s("li",[n._v("逆变：与协变相反， 指 B 可以赋值给 A")]),n._v(" "),s("li",[n._v("双向协变：指既可以协变也可以逆变")])]),n._v(" "),s("h3",{attrs:{id:"协变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协变"}},[n._v("#")]),n._v(" 协变")]),n._v(" "),s("p",[n._v("例子")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Animal {\n  name: string | undefined\n}\n\nclass Bird extends Animal {\n  fly(){}\n}\n\nlet val: Animal = new Animal()\nval = new Bird() // ok 协变\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("在比较两个函数时，先不考虑参数的情况下，类型系统规定源函数的返回值类型必须是被赋值函数返回值类型的子类型，即协变。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let x = () => ({name: 'Alice'});\nlet y = () => ({name: 'Alice', location: 'Seattle'});\n\nx = y; // OK\ny = x; // Error\n\nlet fun1 = ()=> Animal\nlet fun2 = ()=> Bird\n\nfun1 = fun2 // ok 子类型可以赋值给父类型\nfun2 = fun1 // Error 父类型不可以赋值给子类型\n\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h3",{attrs:{id:"逆变、双向协变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逆变、双向协变"}},[n._v("#")]),n._v(" 逆变、双向协变")]),n._v(" "),s("p",[n._v("逆变和双变只能针对函数的赋值")]),n._v(" "),s("p",[n._v("在默认情况下 "),s("code",[n._v("strictFunctionTypes")]),n._v(" 设置为 "),s("code",[n._v("false")]),n._v("，也就是支持函数参数双向协变的情况下")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// --strictFunctionTypes : fasle\nclass Animal {\n  name: string | undefined\n}\n\nclass Bird extends Animal {\n  fly(){}\n}\n\nlet fun1: (x: Animal) => void = (x: Animal)=>{}\nlet fun2: (x: Bird) => void = (x: Bird)=>{}\n\nfun1  = fun2 // ok\nfun2  = fun1 // ok\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("开启了 "),s("code",[n._v("strictFunctionTypes")]),n._v(" 设置为 "),s("code",[n._v("true")]),n._v("，则")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("// --strictFunctionTypes : true\nfun1  = fun2 // error\nfun2  = fun1 // ok\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("在不考虑函数返回值类型的情况下：")]),n._v(" "),s("ul",[s("li",[n._v("在 fun1  =  fun2 中，也就是 fun2（参数类型 Bird ） 赋值 给 fun1（参数类型 Animal），这是协变")]),n._v(" "),s("li",[n._v("在 fun2  =  fun1 中，也就是 fun1（参数类型 Animal ） 赋值 给 fun2（参数类型 Bird ），相反，这是逆变\n可以发现，开启 strictFunctionTypes 后，参数逆变是支持的，协变错误了")])]),n._v(" "),s("p",[n._v("原因举例")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("class Animal {\n  name: string | undefined\n}\nclass Bird extends Animal {\n  fly(){}\n}\nclass Fish extends Animal {\n  swim(){}\n}\n\nlet fun1: (x: Animal) => void = (x: Animal)=>{\n  console.log(x.name)\n}\n\nlet fun2: (x: Bird) => void = (x: Bird)=>{\n  x.fly()\n}\nfun1 = fun2\nlet myFish = new Fish()\nfun1(myFish) // 运行程序报错，x.fly is not a function\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br")])]),s("p",[n._v("在上面的例子中，在函数参数类型支持协变的情况下，我们将 fun2 赋值给 fun1 ，即 fun1 变成 了 (x)=>{x.fly()}，但是fun1的类型还是(x: Animal) => void，所以我们可以传入 new Fish() 作为参数，这时候运行函数由于 Fish 上没有 fly 方法，所以程序执行报错了。\n所以在日常开发中，最好开启严格模式，禁用函数参数双向协变检查。")]),n._v(" "),s("h3",{attrs:{id:"变量赋值检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量赋值检查"}},[n._v("#")]),n._v(" 变量赋值检查")]),n._v(" "),s("p",[n._v("有变量 a 和 变量 b，如果 b 要赋值给 a，那么需要检查 a 的类型的属性是否在 b 类型中都有对应的属性")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('let a: { name: string } = { name: "jack" };\nlet b: { name: string; age: number; gender: string } = {\n  name: "jack",\n  age: 19,\n  gender: "man",\n};\na = b; // ok b类型有a\nb = a; // error 类型a 缺少类型b 中的以下属性: age, gender\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("函数参数的赋值检查和变量赋值检查同理")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('function fun(user: { name: string }) {}\nlet myUser = {\n  name: "jack",\n  age: 19,\n  gender: "man",\n};\nfun(myUser); // ok\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("注意，在上面例子中，如果如下调用函数会报错")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v('fun({\n  name: "jack",\n  age: 19,\n  gender: "man", \n}); // error\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("如果用上面的写法，在参数中写对象相当于直接给 user 参数赋值，这时候会遵循严格的类型定义，但如果先用一个变量接收(例如上面的myUser)，就可以不经过额外属性检查。因为这时候相当于把 myUser 这个变量赋值给 user，根据上面的 变量赋值类型兼容性，可以赋值成功，这样就可以绕开额外类型检查。")]),n._v(" "),s("h3",{attrs:{id:"函数参数个数比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数参数个数比较"}},[n._v("#")]),n._v(" 函数参数个数比较")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let x = (a: number) => 0;\nlet y = (b: number, s: string) => 0;\n\ny = x; // OK\nx = y; // Error `y`有个必需的第二个参数，但是`x`并没有，所以不允许赋值。\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br")])]),s("p",[n._v("两个函数x和y，如果函数x要赋值给函数y，函数x的每个参数都要在函数y中可以找到对应类型的参数。\n这是由于在 js 中，额外的参数可以忽略不传。\n例如")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("let x = (a: number):void => {\n  console.log(a)\n};\nlet y = (b: number, s: string):void => {\n  console.log(b+s)\n};\ny = x // ok\ny(1, 'a') // 这时候调用，因为函数y已经被赋值为 (a: number) => void; 但是其类型还是(b: number, s: string) => void，所以还是要传两个参数，但是调用是只会用到第一个参数，这时候程序可以正常执行，打印结果是-1\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v("如果 y 可以赋值给 x，这时候根据 x 的类型 x 只能传入一个参数，而 y 需要两个参数，这时候运行函数就会报错")])])}),[],!1,null,null,null);s.default=t.exports}}]);