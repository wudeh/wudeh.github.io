(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{499:function(a,e,s){"use strict";s.r(e);var t=s(3),r=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("第一次进入页面，请求服务器，然后服务器进行应答，浏览器会根据response Header来判断是否对资源进行缓存，如果响应头中expires、pragma或者cache-control字段，代表这是强缓存，浏览器就会把资源缓存在memory cache 或 disk cache中。\n第二次请求时，浏览器判断请求参数，如果符合强缓存条件就直接返回状态码200，从本地缓存中拿数据。否则把响应参数存在request header请求头中，看是否符合协商缓存，符合则返回状态码304，不符合则服务器会返回全新资源。")]),a._v(" "),e("h2",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[a._v("#")]),a._v(" 强缓存")]),a._v(" "),e("p",[a._v("访问URL的时候，不会向服务器发送请求，直接从缓存中读取资源，但是会返回200的状态码。")]),a._v(" "),e("h3",{attrs:{id:"强缓存相关字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存相关字段"}},[a._v("#")]),a._v(" 强缓存相关字段")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("expires")])]),a._v(" "),e("li",[e("p",[a._v("是HTTP1.0控制网页缓存的字段，值为一个时间戳，准确来讲是格林尼治时间，服务器返回该请求结果缓存的到期时间，意思是，再次发送请求时，如果未超过过期时间，直接使用该缓存，如果过期了则重新请求。")])]),a._v(" "),e("li",[e("p",[a._v("缺点：就是它判断是否过期是用本地时间来判断的，本地时间是可以自己修改的。")])]),a._v(" "),e("li",[e("p",[a._v("pragma")])]),a._v(" "),e("li",[e("p",[a._v("HTTP1.0中禁用网页缓存的字段，其取值为no-cache，和Cache-Control的no-cache效果一样。")])]),a._v(" "),e("li",[e("p",[a._v("Cache-Control")])]),a._v(" "),e("li",[e("p",[a._v("HTTP1.1中控制网页缓存的字段，当Cache-Control都存在时，Cache-Control优先级更高，主要取值为：")])])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public：资源客户端和服务器都可以缓存。\n\nprivite：资源只有客户端可以缓存。\n\nno-cache：客户端缓存资源，但是是否缓存需要经过协商缓存来验证。\n\nno-store：不使用缓存。\n\nmax-age：缓存保质期。\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("h2",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[a._v("#")]),a._v(" 协商缓存")]),a._v(" "),e("p",[a._v("强缓存失效后，浏览器携带缓存标识向服务器发送请求，由服务器根据缓存标识来决定是否使用缓存")]),a._v(" "),e("h3",{attrs:{id:"协商缓存相关字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存相关字段"}},[a._v("#")]),a._v(" 协商缓存相关字段")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("Last-Modified / If-Modified-Since")])]),a._v(" "),e("li",[e("p",[a._v("Last-Modified：服务器响应请求时，返回该资源文件在服务器最后被修改的时间")])]),a._v(" "),e("li",[e("p",[a._v("If-Modified-Since：是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间。服务器收到该请求，发现请求头含有If-Modified-Since字段，则会根据If-Modified-Since的字段值与该资源在服务器的最后被修改时间做对比，若服务器的资源最后被修改时间大于If-Modified-Since的字段值，则重新返回资源，状态码为200；否则则返回304，代表资源无更新，可继续使用缓存文件。")])]),a._v(" "),e("li",[e("p",[a._v("Etag / If-None-Match")])]),a._v(" "),e("li",[e("p",[a._v("Etag：服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)。")])]),a._v(" "),e("li",[e("p",[a._v("If-None-Match是客户端再次发起该请求时，携带上次请求返回的唯一标识Etag值，通过此字段值告诉服务器该资源上次请求返回的唯一标识值。服务器收到该请求后，发现该请求头中含有If-None-Match，则会根据If-None-Match的字段值与该资源在服务器的Etag值做对比，一致则返回304，代表资源无更新，继续使用缓存文件；不一致则重新返回资源文件，状态码为200")])])]),a._v(" "),e("blockquote",[e("p",[a._v("Etag / If-None-Match优先级高于Last-Modified / If-Modified-Since，同时存在则只有Etag / If-None-Match生效。")])]),a._v(" "),e("h2",{attrs:{id:"缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[a._v("#")]),a._v(" 缓存位置")]),a._v(" "),e("h3",{attrs:{id:"service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[a._v("#")]),a._v(" Service Worker")]),a._v(" "),e("p",[a._v("运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")]),a._v(" "),e("h3",{attrs:{id:"memory-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[a._v("#")]),a._v(" Memory Cache")]),a._v(" "),e("p",[a._v("内存中的缓存，主要包含的是当前中页面中已经抓取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),a._v(" "),e("h3",{attrs:{id:"disk-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disk-cache"}},[a._v("#")]),a._v(" Disk Cache")]),a._v(" "),e("p",[a._v("存储在硬盘中的缓存，读取速度比内存缓存慢，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。")]),a._v(" "),e("h3",{attrs:{id:"push-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[a._v("#")]),a._v(" Push Cache")]),a._v(" "),e("p",[a._v("HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。")]),a._v(" "),e("h2",{attrs:{id:"缓存方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓存方案"}},[a._v("#")]),a._v(" 缓存方案")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("HTML: 协商缓存；")])]),a._v(" "),e("li",[e("p",[a._v("css、js、图片：强缓存，文件名带上hash。")])])]),a._v(" "),e("h2",{attrs:{id:"刷新对于强缓存和协商缓存的影响"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#刷新对于强缓存和协商缓存的影响"}},[a._v("#")]),a._v(" 刷新对于强缓存和协商缓存的影响")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("当ctrl+f5强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存。")])]),a._v(" "),e("li",[e("p",[a._v("当f5刷新网页时，跳过强缓存，但是会检查协商缓存。")])]),a._v(" "),e("li",[e("p",[a._v("浏览器地址栏中写入URL，回车 浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）")])])]),a._v(" "),e("h2",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[a._v("#")]),a._v(" 其他")]),a._v(" "),e("h3",{attrs:{id:"为什么有了-last-modified-还要-etag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么有了-last-modified-还要-etag"}},[a._v("#")]),a._v(" 为什么有了 last-modified 还要 ETag")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("某些服务器不能精确得到文件的最后修改时间， 这样就无法通过最后修改时间来判断文件是否更新了。")])]),a._v(" "),e("li",[e("p",[a._v("某些文件的修改非常频繁，在秒以下的时间内进行修改. Last-Modified只能精确到秒。")])]),a._v(" "),e("li",[e("p",[a._v("一些文件的最后修改时间改变了，但是内容并未改变。 我们不希望客户端认为这个文件修改了。")])])]),a._v(" "),e("h3",{attrs:{id:"nginx-中-etag-的生成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx-中-etag-的生成"}},[a._v("#")]),a._v(" nginx 中 ETag 的生成")]),a._v(" "),e("ul",[e("li",[a._v("总的来说是根据文件的大小和最后修改时间生成的")]),a._v(" "),e("li",[a._v("另外由于 Etag 的生成消耗性能，所以 Etag 适合大小较小且比较重要的资源")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('Content-Length: 612\nLast-Modified: Tue, 23 Apr 2019 10:18:21 GMT\nETag: "5cbee66d-264"\n')])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("p",[a._v("计算规则")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("new Date(parseInt('5cbee66d', 16) * 1000).toJSON()\n\"2019-04-23T10:18:21.000Z\"\n> parseInt('264', 16)\n612\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("blockquote",[e("p",[a._v("express 采用 etag 库生成")])]),a._v(" "),e("h3",{attrs:{id:"prefetch-cache-预取缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prefetch-cache-预取缓存"}},[a._v("#")]),a._v(" prefetch cache(预取缓存)")]),a._v(" "),e("p",[a._v("link标签上带了prefetch，再次加载会出现。")]),a._v(" "),e("p",[a._v("prefetch是预加载的一种方式，被标记为prefetch的资源，将会被浏览器在空闲时间加载。")])])}),[],!1,null,null,null);e.default=r.exports}}]);