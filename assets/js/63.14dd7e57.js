(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{510:function(t,s,n){"use strict";n.r(s);var e=n(3),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"原型对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型对象"}},[t._v("#")]),t._v(" 原型对象")]),t._v(" "),s("p",[t._v("对象由构造函数来新建，每个构造函数内部都有一个prototype 属性，这个属性指向一个对象，包含了由该构造函数创建的实例对象共享的所有属性和所有方法。这个prototype属性的值就是原型对象。")]),t._v(" "),s("h3",{attrs:{id:"proto"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" proto")]),t._v(" "),s("p",[t._v("当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性的值,即构造函数的原型对象。这个指针在浏览器中为__proto__属性。所以大多数情况下（还有少数情况）：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" 对象.__proto__ === 对象的构造函数.prototype  \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("blockquote",[s("p",[t._v("注意：\n最好不要使用__proto__这个属性，因为它不是规范中规定的。 可以通过Object.getPrototypeOf()方法来获取对象的原型。\n原型链")])]),t._v(" "),s("h2",{attrs:{id:"原型链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),s("p",[t._v("当访问一个对象的属性时，如果对象内部不存在这个属性，name就会去这个对象的原型对象里去找这个属性，这个原型对象又会有自己的原型，所以就会一直找下去，这就是原型链的具体表现。\n原型链上的所有原型都是对象，一般来说都会继承 Object.prototype ，所以这就是新建的对象也能够使用 Object.prototype.toString() 等方法的原因。")]),t._v(" "),s("h2",{attrs:{id:"构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),s("p",[t._v('所谓"构造函数"，用来初始化新创建对象的函数，内部使用了this变量。')]),t._v(" "),s("p",[t._v("对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。")]),t._v(" "),s("p",[t._v("构造函数被赋予一个prototype属性，该属性指向了实例对象的原型对象。")]),t._v(" "),s("h3",{attrs:{id:"构造函数的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的特点"}},[t._v("#")]),t._v(" 构造函数的特点")]),t._v(" "),s("ul",[s("li",[t._v("函数体内使用this关键字，代表了所要生成的对象实例")]),t._v(" "),s("li",[t._v("生成实例对象，必须使用new关键字实例化")]),t._v(" "),s("li",[t._v("为了与普通函数区别第一个字母通常大写")])]),t._v(" "),s("h3",{attrs:{id:"new关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#new关键字"}},[t._v("#")]),t._v(" new关键字")]),t._v(" "),s("p",[t._v("new命令的作用，就是执行构造函数，创建一个用户定义的对象类型的实例对象或具有构造函数的内置对象的实例对象")]),t._v(" "),s("ul",[s("li",[t._v("创建一个空对象,作为将要返回的对象实例")]),t._v(" "),s("li",[t._v("将这个空对象的原型（"),s("strong",[t._v("proto")]),t._v("），指向了构造函数的prototype属性")]),t._v(" "),s("li",[t._v("函数内部的this指向这个新对象")]),t._v(" "),s("li",[t._v("执行构造函数内的代码（为这个新对象添加属性）。")]),t._v(" "),s("li",[t._v("判断函数的返回（return）值类型，如果是一个对象，返回return语句指定的对象。否则，就会不管return语句，返回this对象。")])]),t._v(" "),s("h3",{attrs:{id:"constructor属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#constructor属性"}},[t._v("#")]),t._v(" constructor属性")]),t._v(" "),s("p",[t._v("返回创建实例对象的构造函数的引用。注意，此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let a = 1;\na.constructor === Number // true\na.__proto__.constructor === Number // true\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("实例对象本身没有constructor属性，于是会从实例对象的原型 "),s("strong",[t._v("proto")]),t._v(" 查找 constructor 属性，也就是 prototype.constructor")]),t._v(" "),s("h3",{attrs:{id:"实例对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例对象"}},[t._v("#")]),t._v(" 实例对象")]),t._v(" "),s("p",[t._v("由构造函数创建的对象一般被称为实例对象。实例对象将自动引用原型对象的属性和方法。也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用原型对象的。\n实例对象会自动含有一个constructor属性，这个constructor是通过继承原型对象继承来的，它指向了实例对象的构造函数。")]),t._v(" "),s("p",[t._v("实例对象的"),s("code",[t._v("__proto__")]),t._v("指向构造函数的"),s("code",[t._v("prototype")])]),t._v(" "),s("h2",{attrs:{id:"简单总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单总结"}},[t._v("#")]),t._v(" 简单总结")]),t._v(" "),s("blockquote",[s("p",[t._v("Object.prototype."),s("strong",[t._v("proto")]),t._v(" === null")])]),t._v(" "),s("blockquote",[s("p",[t._v("Object."),s("strong",[t._v("proto")]),t._v(" === Function.prototype\nObject为构造函数,所有构造函数的__proto__都指向Function.prototype")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let a=10 \na.__proto__ === Number.prototype // true\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("基本类型的转换会先把基本类型转换为对应的构造函数")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Object.__proto__ === Function.prototype === Function.__proto__ // true\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("Object,Number, Error,Function等等这些函数都是Function创建的，它们的constructor为Function，需要额外注意的是Function.constructor也是Function。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" Object.constructor === Function // true\n Object.constructor.prototype  === Function.prototype  // true\n Function.constructor === Function// true\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Function.prototype.__proto__ === Object.prototype\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h2",{attrs:{id:"原型链继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[t._v("#")]),t._v(" 原型链继承")]),t._v(" "),s("p",[t._v("原型链继承，就是让对象实例通过原型链的方式串联起来，当访问目标对象的某一属性时，能顺着原型链进行查找，从而达到类似继承的效果。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 父类\nfunction SuperType (colors = ['red', 'blue', 'green']) {\n    this.colors = colors;\n}\n\n// 子类\nfunction SubType () {}\n// 继承父类\nSubType.prototype = new SuperType();\n// 以这种方式将 constructor 属性指回 SubType 会改变 constructor 为可遍历属性\nSubType.prototype.constructor = SubType;\n\nlet superInstance1 = new SuperType(['yellow', 'pink']);\nlet subInstance1 = new SubType();\nlet subInstance2 = new SubType();\nsuperInstance1.colors; // => ['yellow', 'pink']\nsubInstance1.colors; // => ['red', 'blue', 'green']\nsubInstance2.colors; // => ['red', 'blue', 'green']\nsubInstance1.colors.push('black');\nsubInstance1.colors; // => ['red', 'blue', 'green', 'black']\nsubInstance2.colors; // => ['red', 'blue', 'green', 'black']\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[t._v("缺点：")]),t._v(" "),s("ul",[s("li",[t._v("在创建子类实例的时候，不能向超类型的构造函数中传递参数。")]),t._v(" "),s("li",[t._v("这样创建的子类原型会包含父类的实例属性，造成引用类型属性同步修改的问题。")])]),t._v(" "),s("h2",{attrs:{id:"寄生组合继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合继承"}},[t._v("#")]),t._v(" 寄生组合继承")]),t._v(" "),s("p",[t._v("使用 Object.create(Parent.prototype) 创建一个新的原型对象赋予子类")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 寄生组合继承实现\n\nfunction Parent(value) {\n    this.value = value;\n}\n\nParent.prototype.getValue = function() {\n    console.log(this.value);\n}\n\nfunction Child(value) {\n    Parent.call(this, value)\n}\n\nChild.prototype = Object.create(Parent.prototype, {\n    constructor: {\n        value: Child,\n        enumerable: false, // 不可枚举该属性\n        writable: true, // 可改写该属性\n        configurable: true // 可用 delete 删除该属性\n    }\n})\n\nconst child = new Child(1)\nchild.getValue();\nchild instanceof Parent;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])]),s("p",[t._v("寄生组合继承的模式是现在业内公认的比较可靠的 JS 继承模式，ES6 的 class 继承在 babel 转义后，底层也是使用的寄生组合继承的方式实现的。")])])}),[],!1,null,null,null);s.default=a.exports}}]);