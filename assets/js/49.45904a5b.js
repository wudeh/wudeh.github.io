(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{497:function(s,n,a){"use strict";a.r(n);var e=a(3),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"数组遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组遍历"}},[s._v("#")]),s._v(" 数组遍历")]),s._v(" "),n("h3",{attrs:{id:"for、foreach、for-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for、foreach、for-of"}},[s._v("#")]),s._v(" for、forEach、for ...of")]),s._v(" "),n("ul",[n("li",[s._v("三者都是基本的由左到右遍历数组")]),s._v(" "),n("li",[s._v("forEach 无法跳出循环；for 和 for ..of 可以使用 break 或者 continue 中断或跳过。")]),s._v(" "),n("li",[s._v("forEach 可以跳出循环但是只能通过 throw Error 形式")]),s._v(" "),n("li",[s._v("for ...of 直接访问的是实际元素。for 遍历数组索引，forEach 回调函数参数更丰富，元素、索引、原数组都可以获取。")]),s._v(" "),n("li",[s._v("for ...of 与 for 如果数组中存在空元素，同样会执行。")]),s._v(" "),n("li",[s._v("for 循环每次会取最新的值来循环，如果循环中改变了数组，会取改变后的值来执行；forEach 不会")]),s._v(" "),n("li",[s._v("forEach 专门循环数组，Map, Set; for...of 循环可迭代的数据结构(有[symbol.iterator]方法即为可迭代对象)")])]),s._v(" "),n("p",[s._v("注意：使用 forEach 改变原数组的时候最好用参数 2、参数 3 修改原数组，或者改用 map")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 1、数组的元素是基本数据类型\nlet numArr = [1, 2, 3];\n\nnumArr.forEach((item) => {\n    item = item * 2;\n});\nconsole.log(numArr); // 打印结果：[1, 2, 3] 无法改变\n\nlet numArr = [1, 2, 3];\n\nnumArr.forEach((item, index, arr) => {\n    arr[index] = arr[index] * 2;\n});\nconsole.log(JSON.stringify(numArr)); // 打印结果：[2, 4, 6]\n\n// 2、数组的元素是引用数据类型时，直接修改对象\nlet objArr = [\n    { name: \'云牧\', age: 20 },\n    { name: \'许嵩\', age: 30 },\n];\n\nobjArr.forEach((item) => {\n    item = {\n        name: \'邓紫棋\',\n        age: \'29\',\n    };\n});\nconsole.log(JSON.stringify(objArr)); \n// 打印结果：[{"name": "云牧","age": 20},{"name": "许嵩","age": 30}]（直接修改整个元素对象时，无法改变原数组）\n\nlet objArr = [\n    { name: \'云牧\', age: 28 },\n    { name: \'许嵩\', age: 30 },\n];\n\nobjArr.forEach((item) => {\n    item.name = \'邓紫棋\';\n});\nconsole.log(JSON.stringify(objArr));\n// 打印结果：[{"name":"邓紫棋","age":28},{"name":"邓紫棋","age":30}]（修改元素对象里的某个属性时，可以改变原数组）\n\n\nlet objArr = [\n    { name: \'云牧\', age: 28 },\n    { name: \'许嵩\', age: 34 },\n];\n\nobjArr.forEach((item, index, arr) => {\n    arr[index] = {\n        name: \'小明\',\n        age: \'10\',\n    };\n});\nconsole.log(JSON.stringify(objArr)); \n// 打印结果：[{"name":"小明","age":"10"},{"name":"小明","age":"10"}]\n\n// 3、数组的元素是引用数据类型时，修改对象的某个属性\nlet objArr2 = [\n    { name: \'云牧\', age: 28 },\n    { name: \'许嵩\', age: 34 },\n];\n\nobjArr2.forEach((item, index, arr) => {\n    arr[index].name = \'小明\';\n});\nconsole.log(JSON.stringify(objArr2)); \n// 打印结果：[{"name":"小明","age":28},{"name":"小明","age":34}]\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br")])]),n("h3",{attrs:{id:"some、every"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#some、every"}},[s._v("#")]),s._v(" some、every")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list = [\n  { name: '头部导航', backward: false },\n  { name: '轮播', backward: true },\n  { name: '页脚', backward: false },\n];\nconst someBackward = list.some(item => item.backward);\n// someBackward: true\nconst everyNewest = list.every(item => !item.backward);\n// everyNewest: false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("二者都是用来做数组条件判断的，都是返回一个布尔值")]),s._v(" "),n("li",[s._v("二者都可以被中断")]),s._v(" "),n("li",[s._v("some 若某一元素满足条件，返回 true，循环中断；所有元素不满足条件，返回 false。")]),s._v(" "),n("li",[s._v("every 与 some 相反，若有益元素不满足条件，返回 false，循环中断；所有元素满足条件，返回 true。")])]),s._v(" "),n("h3",{attrs:{id:"filter、map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter、map"}},[s._v("#")]),s._v(" filter、map")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list = [\n{ name: '头部导航', type: 'nav', id: 1 },,\n{ name: '轮播', type: 'content', id: 2 },\n{ name: '页脚', type: 'nav', id: 3 },\n];\nconst resultList = list.filter(item => {\n  console.log(item);\n  return item.type === 'nav';\n});\n// resultList: [\n//   { name: '头部导航', type: 'nav', id: 1 },\n//   { name: '页脚', type: 'nav', id: 3 },\n// ]\n\nconst newList = list.map(item => {\n  console.log(item);\n  return item.id;\n});\n// newList: [1, empty, 2, 3]\n\n// list: [\n//   { name: '头部导航', type: 'nav', id: 1 },\n//   empty,\n//   { name: '轮播', type: 'content', id: 2 },\n//   { name: '页脚', type: 'nav', id: 3 },\n// ]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("ul",[n("li",[s._v("二者都是生成一个新数组，都不会改变原数组（不包括遍历对象数组是，在回调函数中操作元素对象）")]),s._v(" "),n("li",[s._v("二者都会跳过空元素。")]),s._v(" "),n("li",[s._v("map 会将回调函数的返回值组成一个新数组，数组长度与原数组一致。")]),s._v(" "),n("li",[s._v("filter 会将符合回调函数条件的元素组成一个新数组，数组长度与原数组不同。")]),s._v(" "),n("li",[s._v("map 生成的新数组元素是可自定义。")]),s._v(" "),n("li",[s._v("filter 生成的新数组元素不可自定义，与对应原数组元素一致。")])]),s._v(" "),n("h3",{attrs:{id:"find、findindex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#find、findindex"}},[s._v("#")]),s._v(" find、findIndex")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list = [\n{ name: '头部导航', id: 1 },\n{ name: '轮播', id: 2 },\n{ name: '页脚', id: 3 },\n];\nconst result = list.find((item) => item.id === 3);\n// result: { name: '页脚', id: 3 }\nresult.name = '底部导航';\n// list: [\n//   { name: '头部导航', id: 1 },\n//   { name: '轮播', id: 2 },\n//   { name: '底部导航', id: 3 },\n// ]\n\nconst index = list.findIndex((item) => item.id === 3);\n// index: 2\nlist[index].name // '底部导航';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("ul",[n("li",[s._v("二者都是用来查找数组元素。")]),s._v(" "),n("li",[s._v("find 方法返回数组中满足 callback 函数的第一个元素的值。如果不存在返回 undefined。")]),s._v(" "),n("li",[s._v("findIndex 它返回数组中找到的元素的索引，而不是其值，如果不存在返回 -1。")])]),s._v(" "),n("h3",{attrs:{id:"reduce、reduceright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reduce、reduceright"}},[s._v("#")]),s._v(" reduce、reduceRight")]),s._v(" "),n("p",[s._v("reduce 方法接收两个参数，第一个参数是回调函数（callback） ，第二个参数是初始值（initialValue）。")]),s._v(" "),n("p",[s._v("reduceRight 方法除了与 reduce 执行方向相反外(从右往左)，其他完全与其一致。")]),s._v(" "),n("p",[s._v("回调函数接收四个参数：")]),s._v(" "),n("ul",[n("li",[s._v("accumulator：MDN 上解释为累计器，截至当前元素，之前所有的数组元素被回调函数处理累计的结果。")]),s._v(" "),n("li",[s._v("current：当前被执行的数组元素。")]),s._v(" "),n("li",[s._v("currentIndex: 当前被执行的数组元素索引。")]),s._v(" "),n("li",[s._v("sourceArray：原数组，也就是调用 reduce 方法的数组。")])]),s._v(" "),n("blockquote",[n("p",[s._v("如果不传入初始值，将会默认以数组第一个元素为初始值，reduce 方法会从索引 1 开始执行回调函数；如果传入初始值，将从索引 0 开始、并从初始值的基础上累计执行回调。")])]),s._v(" "),n("p",[s._v("计算对象数组某一属性的总和")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list  = [\n  { name: 'left', width: 20 },\n  { name: 'center', width: 70 },\n  { name: 'right', width: 10 },\n];\nconst total = list.reduce((currentTotal, item) => {\n  return currentTotal + item.width;\n}, 0);\n// total: 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("对象数组的去重，并统计每一项重复次数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list  = [\n  { name: 'left', width: 20 },\n  { name: 'right', width: 10 },\n  { name: 'center', width: 70 },\n  { name: 'right', width: 10 },\n  { name: 'left', width: 20 },\n  { name: 'right', width: 10 },\n];\nconst repeatTime = {};\nconst result = list.reduce((array, item) => {\n  if (repeatTime[item.name]) {\n    repeatTime[item.name]++;\n    return array;\n  }\n  repeatTime[item.name] = 1;\n  return [...array, item];\n}, []);\n// repeatTime: { left: 2, right: 3, center: 1 }\n// result: [\n//   { name: 'left', width: 20 },\n//   { name: 'right', width: 10 },\n//   { name: 'center', width: 70 },\n// ]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("对象数组最大/最小值获取")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const list  = [\n  { name: 'left', width: 20 },\n  { name: 'right', width: 30 },\n  { name: 'center', width: 70 },\n  { name: 'top', width: 40 },\n  { name: 'bottom', width: 20 },\n];\nconst max = list.reduce((curItem, item) => {\n  return curItem.width >= item.width ? curItem : item;\n});\nconst min = list.reduce((curItem, item) => {\n  return curItem.width <= item.width ? curItem : item;\n});\n// max: { name: \"center\", width: 70 }\n// min: { name: \"left\", width: 20 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[s._v("#")]),s._v(" 性能")]),s._v(" "),n("p",[s._v("一般来说，for 循环属于性能较好的，但是在不同的浏览器中是不一样的。")]),s._v(" "),n("h2",{attrs:{id:"对象遍历"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象遍历"}},[s._v("#")]),s._v(" 对象遍历")]),s._v(" "),n("h3",{attrs:{id:"for-in"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[s._v("#")]),s._v(" for in")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.prototype.fun = () => {};\nconst obj = { 2: 'a', 1: 'b' };\nfor (const i in obj) {\n  console.log(i, ':', obj[i]);\n}\n// 1: b\n// 2: a\n// fun : () => {}\nObject 原型链上扩展的方法也被遍历出来\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("使用 for in 循环时，返回的是所有能够通过对象访问的、可枚举的属性，既包括存在于实例中的属性，也包括存在于原型中的实例。如果只需要获取对象的实例属性，可以使用 hasOwnProperty 进行过滤。")]),s._v(" "),n("h3",{attrs:{id:"object-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[s._v("#")]),s._v(" Object.keys")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.prototype.fun = () => {};\nconst str = 'ab';\nconsole.log(Object.keys(str));\n// ['0', '1']\nconst arr = ['a', 'b'];\nconsole.log(Object.keys(arr));\n// ['0', '1']\nconst obj = { 1: 'b', 0: 'a' };\nconsole.log(Object.keys(obj));\n// ['0', '1']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("用于获取对象自身所有的可枚举的属性键名，但不包括原型中的属性，然后返回一个由属性名组成的数组。")]),s._v(" "),n("h3",{attrs:{id:"object-values"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-values"}},[s._v("#")]),s._v(" Object.values")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.prototype.fun = () => {};\nconst str = 'ab';\nconsole.log(Object.values(str));\n// ['a', 'b']\nconst arr = ['a', 'b'];\nconsole.log(Object.values(arr));\n// ['a', 'b']\nconst obj = { 1: 'b', 0: 'a' };\nconsole.log(Object.values(obj));\n// ['a', 'b']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("用于获取对象自身所有的可枚举的属性值，但不包括原型中的属性，然后返回一个由属性值组成的数组。")]),s._v(" "),n("h3",{attrs:{id:"object-entries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-entries"}},[s._v("#")]),s._v(" Object.entries")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const str = 'ab';\nfor (const [key, value] of Object.entries(str)) {\n  console.log(`${key}: ${value}`);\n}\n// 0: a\n// 1: b\nconst arr = ['a', 'b'];\nfor (const [key, value] of Object.entries(arr)) {\n  console.log(`${key}: ${value}`);\n}\n// 0: a\n// 1: b\nconst obj = { 1: 'b', 0: 'a' };\nfor (const [key, value] of Object.entries(obj)) {\n  console.log(`${key}: ${value}`);\n}\n// 0: a\n// 1: b\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("用于获取对象自身所有的可枚举的属性值，但不包括原型中的属性，然后返回二维数组。每一个子数组由对象的属性名、属性值组成。可以同时拿到属性名与属性值的方法。")]),s._v(" "),n("h3",{attrs:{id:"object-getownpropertynames"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[s._v("#")]),s._v(" Object.getOwnPropertyNames")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Object.prototype.fun = () => {};\nArray.prototype.fun = () => {};\nconst str = 'ab';\nconsole.log(Object.getOwnPropertyNames(str));\n// ['0', '1', 'length']\nconst arr = ['a', 'b'];\nconsole.log(Object.getOwnPropertyNames(arr));\n// ['0', '1', 'length']\nconst obj = { 1: 'b', 0: 'a' };\nconsole.log(Object.getOwnPropertyNames(obj));\n// ['0', '1']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("Object.getOwnPropertyNames 返回一个数组，包含对象自身的所有属性键名（不含 Symbol 属性，但是包括不可枚举属性）。")]),s._v(" "),n("h3",{attrs:{id:"object-getownpropertysymbols"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertysymbols"}},[s._v("#")]),s._v(" Object.getOwnPropertySymbols()")]),s._v(" "),n("p",[s._v("返回一个数组，包含对象自身的所有 Symbol 属性。")]),s._v(" "),n("h3",{attrs:{id:"reflect-ownkeys-obj"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys-obj"}},[s._v("#")]),s._v(" Reflect.ownKeys(obj)")]),s._v(" "),n("p",[s._v("返回一个数组，包含对象自身的所有属性键名，不管是属性名是 Symbol 或字符串，也不管是否可枚举。")])])}),[],!1,null,null,null);n.default=t.exports}}]);