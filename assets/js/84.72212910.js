(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{532:function(s,a,n){"use strict";n.r(a);var t=n(3),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"前端内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端内存泄漏"}},[s._v("#")]),s._v(" 前端内存泄漏")]),s._v(" "),a("p",[s._v("系统进程不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。当内存占用越来越高，轻则影响系统性能，重则导致进程崩溃。Chrome 限制了浏览器所能使用的内存极限64位为 1.4GB，32 位为 1.0GB")]),s._v(" "),a("h2",{attrs:{id:"引起内存泄漏的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引起内存泄漏的原因"}},[s._v("#")]),s._v(" 引起内存泄漏的原因")]),s._v(" "),a("h3",{attrs:{id:"意外的全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#意外的全局变量"}},[s._v("#")]),s._v(" 意外的全局变量")]),s._v(" "),a("p",[s._v("由于 js 对未声明变量的处理方式是在全局对象上创建该变量的引用。如果在浏览器中，全局对象就是 window 对象。变量在窗口关闭或重新刷新页面之前都不会被释放，如果未声明的变量缓存大量的数据，就会导致内存泄露。")]),s._v(" "),a("p",[s._v("1.1 未声明变量")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function fn() {\n  a = 'hello'\n}\nfn()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("1.2 使用 this 创建的变量(this 的指向是 window)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function fn() {\n  this.a = 'hello'\n}\nfn()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("解决方法：")]),s._v(" "),a("p",[s._v("避免创建全局变量\n使用严格模式,在 JavaScript 文件头部或者函数的顶部加上 use strict")]),s._v(" "),a("h3",{attrs:{id:"闭包引起的内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包引起的内存泄漏"}},[s._v("#")]),s._v(" 闭包引起的内存泄漏")]),s._v(" "),a("p",[s._v("于闭包可以读取函数内部的变量，然后让这些变量始终保存在内存中。如果在使用结束后没有将局部变量清除，就可能导致内存泄露。\n所以避免乱用闭包")]),s._v(" "),a("h3",{attrs:{id:"没有清理的dom元素引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#没有清理的dom元素引用"}},[s._v("#")]),s._v(" 没有清理的DOM元素引用")]),s._v(" "),a("p",[s._v("在某个地方删除了元素，但是对象中还存在对dom的引用")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 在对象中引用DOM\nvar elements = {\n  btn: document.getElementById('btn'),\n}\nfunction doSomeThing() {\n  elements.btn.click()\n}\n\nfunction removeBtn() {\n  // 将body中的btn移除, 也就是移除 DOM树中的btn\n  document.body.removeChild(document.getElementById('btn'))\n  // 但是此时全局变量elements还是保留了对btn的引用, btn还是存在于内存中,不能被回收\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("解决方法：手动删除，elements.btn = null")]),s._v(" "),a("h3",{attrs:{id:"被遗忘的定时器或者回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#被遗忘的定时器或者回调"}},[s._v("#")]),s._v(" 被遗忘的定时器或者回调")]),s._v(" "),a("p",[s._v("定时器中有 dom 的引用，即使 dom 删除了，但是定时器还在，所以内存中还是有这个 dom。")]),s._v(" "),a("p",[s._v("解决方法：")]),s._v(" "),a("p",[s._v("手动删除定时器和 dom\nremoveEventListener 移除事件监听")]),s._v(" "),a("h3",{attrs:{id:"控制台日志-console-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制台日志-console-log"}},[s._v("#")]),s._v(" 控制台日志，console.log")]),s._v(" "),a("p",[s._v("console.log打印的对象不能被垃圾回收，可能会导致内存泄露")]),s._v(" "),a("h3",{attrs:{id:"map、set对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map、set对象"}},[s._v("#")]),s._v(" Map、Set对象")]),s._v(" "),a("p",[s._v("使用 Map 或 Set 存储对象时，同 Object 一致都是强引用，如果不将其主动清除引用，其同样会造成内存不自动进行回收。\n如果使用 Map ，对于键为对象的情况，可以采用 WeakMap，WeakMap 对象同样用来保存键值对，对于键是弱引用（注：WeakMap 只对于键是弱引用），且必须为一个对象，而值可以是任意的对象或者原始值，由于是对于对象的弱引用，不会干扰 Js 的垃圾回收。")]),s._v(" "),a("p",[s._v("JS 的垃圾回收机制是如果我们持有对一个对象的引用，那么这个对象就不会被垃圾回收，这里的引用，指的就是 强引用 ，而弱引用就是一个对象若只被弱引用所引用，则被认为是不可访问（或弱可访问）的，因此可能在任何时刻被回收。")]),s._v(" "),a("h2",{attrs:{id:"监听者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监听者模式"}},[s._v("#")]),s._v(" 监听者模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<template>\n  <div></div>\n</template>\n\n<script>\nexport default {\n  created() {\n    eventBus.on("test", this.doSomething)\n  },\n  beforeDestroy(){\n    eventBus.off("test", this.doSomething)\n  },\n  methods: {\n    doSomething() {\n      // do something\n    }\n  }\n}\n<\/script>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("在 beforeDestroy 组件销毁生命周期里将其清除即可。")]),s._v(" "),a("h2",{attrs:{id:"内存三大件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存三大件"}},[s._v("#")]),s._v(" 内存三大件")]),s._v(" "),a("p",[s._v("前端关于内存方面主要有三个问题：")]),s._v(" "),a("ul",[a("li",[s._v("内存泄漏：对象已经不再使用但没有被回收，内存没有被释放，即内存泄漏，那想要避免就避免让无用数据还存在引用关系，也就是多注意上面说的常见的几种内存泄漏的情况。")]),s._v(" "),a("li",[s._v("内存膨胀：即在短时间内内存占用极速上升到达一个峰值，想要避免需要使用技术手段减少对内存的占用。")]),s._v(" "),a("li",[s._v("频繁 GC：同这个名字，就是 GC 执行的特别频繁，一般出现在频繁使用大的临时变量导致新生代空间被装满的速度极快，而每次新生代装满时就会触发 GC，频繁 GC 同样会导致页面卡顿，想要避免的话就不要搞太多的临时变量，因为临时变量不用了就会被回收，这和内存泄漏中说避免使用全局变量冲突，其实，只要把握好其中的度，不太过分就 OK。")])]),s._v(" "),a("h2",{attrs:{id:"排查内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排查内存泄漏"}},[s._v("#")]),s._v(" 排查内存泄漏")]),s._v(" "),a("p",[s._v("https://juejin.cn/post/6984188410659340324#heading-9")])])}),[],!1,null,null,null);a.default=e.exports}}]);